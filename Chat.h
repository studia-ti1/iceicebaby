//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Chat_h__
#define __Chat_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace Chat
{

class CoreServer;
class CoreServerPrx;
class GroupServer;
class GroupServerPrx;
class GroupServerManager;
class GroupServerManagerPrx;
class User;
class UserPrx;

}

namespace Chat
{

class NameDoesNotExist : public ::Ice::UserExceptionHelper<NameDoesNotExist, ::Ice::UserException>
{
public:

    virtual ~NameDoesNotExist();

    NameDoesNotExist(const NameDoesNotExist&) = default;

    NameDoesNotExist() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

/// \cond INTERNAL
static NameDoesNotExist _iceS_NameDoesNotExist_init;
/// \endcond

class NameAlreadyExists : public ::Ice::UserExceptionHelper<NameAlreadyExists, ::Ice::UserException>
{
public:

    virtual ~NameAlreadyExists();

    NameAlreadyExists(const NameAlreadyExists&) = default;

    NameAlreadyExists() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class ServerAlreadyRegistered : public ::Ice::UserExceptionHelper<ServerAlreadyRegistered, ::Ice::UserException>
{
public:

    virtual ~ServerAlreadyRegistered();

    ServerAlreadyRegistered(const ServerAlreadyRegistered&) = default;

    ServerAlreadyRegistered() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class ServerDoesNotExist : public ::Ice::UserExceptionHelper<ServerDoesNotExist, ::Ice::UserException>
{
public:

    virtual ~ServerDoesNotExist();

    ServerDoesNotExist(const ServerDoesNotExist&) = default;

    ServerDoesNotExist() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class UserAlreadyRegistered : public ::Ice::UserExceptionHelper<UserAlreadyRegistered, ::Ice::UserException>
{
public:

    virtual ~UserAlreadyRegistered();

    UserAlreadyRegistered(const UserAlreadyRegistered&) = default;

    UserAlreadyRegistered() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class UserDoesNotExist : public ::Ice::UserExceptionHelper<UserDoesNotExist, ::Ice::UserException>
{
public:

    virtual ~UserDoesNotExist();

    UserDoesNotExist(const UserDoesNotExist&) = default;

    UserDoesNotExist() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

class NoPermission : public ::Ice::UserExceptionHelper<NoPermission, ::Ice::UserException>
{
public:

    virtual ~NoPermission();

    NoPermission(const NoPermission&) = default;

    NoPermission() = default;

    /**
     * Obtains a tuple containing all of the exception's data members.
     * @return The data members in a tuple.
     */

    std::tuple<> ice_tuple() const
    {
        return std::tie();
    }

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();
};

using GroupManagers = ::std::vector<::std::shared_ptr<GroupServerManagerPrx>>;

using Groups = ::std::vector<::std::shared_ptr<GroupServerPrx>>;

using Users = ::std::vector<::std::shared_ptr<UserPrx>>;

}

namespace Chat
{

class CoreServer : public virtual ::Ice::Object
{
public:

    using ProxyType = CoreServerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::shared_ptr<UserPrx> getUserByName(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getUserByName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Groups listGroups(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_listGroups(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<GroupServerPrx> getGroupServerByName(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getGroupServerByName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void logIn(::std::shared_ptr<UserPrx> user, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_logIn(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void logOut(::std::shared_ptr<UserPrx> user, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_logOut(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void createGroup(::std::string name, ::std::shared_ptr<UserPrx> requester, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_createGroup(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void deleteGroup(::std::string name, ::std::shared_ptr<UserPrx> requester, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_deleteGroup(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void registerServer(::std::shared_ptr<GroupServerManagerPrx> serverManager, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_registerServer(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void unregisterServer(::std::shared_ptr<GroupServerManagerPrx> serverManager, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_unregisterServer(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class GroupServer : public virtual ::Ice::Object
{
public:

    using ProxyType = GroupServerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::string getName(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getAdminName(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getAdminName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Users listUsers(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_listUsers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void join(::std::shared_ptr<UserPrx> user, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_join(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void leave(::std::shared_ptr<UserPrx> user, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_leave(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendMessage(::std::string message, ::std::shared_ptr<UserPrx> sender, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_sendMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class GroupServerManager : public virtual ::Ice::Object
{
public:

    using ProxyType = GroupServerManagerPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual int getGroupsCount(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getGroupsCount(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getName(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Groups listGroups(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_listGroups(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<GroupServerPrx> getGroupServerByName(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getGroupServerByName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::shared_ptr<GroupServerPrx> createGroup(::std::string name, ::std::shared_ptr<UserPrx> requester, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_createGroup(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void deleteGroup(::std::string name, ::std::shared_ptr<UserPrx> requester, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_deleteGroup(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

class User : public virtual ::Ice::Object
{
public:

    using ProxyType = UserPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::string getName(const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void receiveText(::std::string msg, ::std::shared_ptr<UserPrx> sender, ::std::string groupName, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_receiveText(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void receivePrivateText(::std::string msg, ::std::shared_ptr<UserPrx> sender, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_receivePrivateText(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace Chat
{

class CoreServerPrx : public virtual ::Ice::Proxy<CoreServerPrx, ::Ice::ObjectPrx>
{
public:

    ::std::shared_ptr<UserPrx> getUserByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<UserPrx>>(true, this, &CoreServerPrx::_iceI_getUserByName, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getUserByNameAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<UserPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<UserPrx>, P>(false, this, &CoreServerPrx::_iceI_getUserByName, name, context);
    }

    ::std::function<void()>
    getUserByNameAsync(const ::std::string& name,
                       ::std::function<void(::std::shared_ptr<UserPrx>)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<UserPrx>>(response, ex, sent, this, &Chat::CoreServerPrx::_iceI_getUserByName, name, context);
    }

    /// \cond INTERNAL
    void _iceI_getUserByName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<UserPrx>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    Groups listGroups(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<Groups>(true, this, &CoreServerPrx::_iceI_listGroups, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto listGroupsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Groups>>().get_future())
    {
        return _makePromiseOutgoing<Groups, P>(false, this, &CoreServerPrx::_iceI_listGroups, context);
    }

    ::std::function<void()>
    listGroupsAsync(::std::function<void(Groups)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<Groups>(response, ex, sent, this, &Chat::CoreServerPrx::_iceI_listGroups, context);
    }

    /// \cond INTERNAL
    void _iceI_listGroups(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Groups>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<GroupServerPrx> getGroupServerByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<GroupServerPrx>>(true, this, &CoreServerPrx::_iceI_getGroupServerByName, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getGroupServerByNameAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<GroupServerPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<GroupServerPrx>, P>(false, this, &CoreServerPrx::_iceI_getGroupServerByName, name, context);
    }

    ::std::function<void()>
    getGroupServerByNameAsync(const ::std::string& name,
                              ::std::function<void(::std::shared_ptr<GroupServerPrx>)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<GroupServerPrx>>(response, ex, sent, this, &Chat::CoreServerPrx::_iceI_getGroupServerByName, name, context);
    }

    /// \cond INTERNAL
    void _iceI_getGroupServerByName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<GroupServerPrx>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void logIn(const ::std::shared_ptr<UserPrx>& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CoreServerPrx::_iceI_logIn, user, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto logInAsync(const ::std::shared_ptr<UserPrx>& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CoreServerPrx::_iceI_logIn, user, context);
    }

    ::std::function<void()>
    logInAsync(const ::std::shared_ptr<UserPrx>& user,
               ::std::function<void()> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::CoreServerPrx::_iceI_logIn, user, context);
    }

    /// \cond INTERNAL
    void _iceI_logIn(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<UserPrx>&, const ::Ice::Context&);
    /// \endcond

    void logOut(const ::std::shared_ptr<UserPrx>& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CoreServerPrx::_iceI_logOut, user, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto logOutAsync(const ::std::shared_ptr<UserPrx>& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CoreServerPrx::_iceI_logOut, user, context);
    }

    ::std::function<void()>
    logOutAsync(const ::std::shared_ptr<UserPrx>& user,
                ::std::function<void()> response,
                ::std::function<void(::std::exception_ptr)> ex = nullptr,
                ::std::function<void(bool)> sent = nullptr,
                const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::CoreServerPrx::_iceI_logOut, user, context);
    }

    /// \cond INTERNAL
    void _iceI_logOut(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<UserPrx>&, const ::Ice::Context&);
    /// \endcond

    void createGroup(const ::std::string& name, const ::std::shared_ptr<UserPrx>& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CoreServerPrx::_iceI_createGroup, name, requester, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto createGroupAsync(const ::std::string& name, const ::std::shared_ptr<UserPrx>& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CoreServerPrx::_iceI_createGroup, name, requester, context);
    }

    ::std::function<void()>
    createGroupAsync(const ::std::string& name, const ::std::shared_ptr<UserPrx>& requester,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::CoreServerPrx::_iceI_createGroup, name, requester, context);
    }

    /// \cond INTERNAL
    void _iceI_createGroup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::shared_ptr<UserPrx>&, const ::Ice::Context&);
    /// \endcond

    void deleteGroup(const ::std::string& name, const ::std::shared_ptr<UserPrx>& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CoreServerPrx::_iceI_deleteGroup, name, requester, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto deleteGroupAsync(const ::std::string& name, const ::std::shared_ptr<UserPrx>& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CoreServerPrx::_iceI_deleteGroup, name, requester, context);
    }

    ::std::function<void()>
    deleteGroupAsync(const ::std::string& name, const ::std::shared_ptr<UserPrx>& requester,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::CoreServerPrx::_iceI_deleteGroup, name, requester, context);
    }

    /// \cond INTERNAL
    void _iceI_deleteGroup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::shared_ptr<UserPrx>&, const ::Ice::Context&);
    /// \endcond

    void registerServer(const ::std::shared_ptr<GroupServerManagerPrx>& serverManager, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CoreServerPrx::_iceI_registerServer, serverManager, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto registerServerAsync(const ::std::shared_ptr<GroupServerManagerPrx>& serverManager, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CoreServerPrx::_iceI_registerServer, serverManager, context);
    }

    ::std::function<void()>
    registerServerAsync(const ::std::shared_ptr<GroupServerManagerPrx>& serverManager,
                        ::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::CoreServerPrx::_iceI_registerServer, serverManager, context);
    }

    /// \cond INTERNAL
    void _iceI_registerServer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<GroupServerManagerPrx>&, const ::Ice::Context&);
    /// \endcond

    void unregisterServer(const ::std::shared_ptr<GroupServerManagerPrx>& serverManager, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &CoreServerPrx::_iceI_unregisterServer, serverManager, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto unregisterServerAsync(const ::std::shared_ptr<GroupServerManagerPrx>& serverManager, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &CoreServerPrx::_iceI_unregisterServer, serverManager, context);
    }

    ::std::function<void()>
    unregisterServerAsync(const ::std::shared_ptr<GroupServerManagerPrx>& serverManager,
                          ::std::function<void()> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::CoreServerPrx::_iceI_unregisterServer, serverManager, context);
    }

    /// \cond INTERNAL
    void _iceI_unregisterServer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<GroupServerManagerPrx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    CoreServerPrx() = default;
    friend ::std::shared_ptr<CoreServerPrx> IceInternal::createProxy<CoreServerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class GroupServerPrx : public virtual ::Ice::Proxy<GroupServerPrx, ::Ice::ObjectPrx>
{
public:

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &GroupServerPrx::_iceI_getName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getNameAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &GroupServerPrx::_iceI_getName, context);
    }

    ::std::function<void()>
    getNameAsync(::std::function<void(::std::string)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &Chat::GroupServerPrx::_iceI_getName, context);
    }

    /// \cond INTERNAL
    void _iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    ::std::string getAdminName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &GroupServerPrx::_iceI_getAdminName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAdminNameAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &GroupServerPrx::_iceI_getAdminName, context);
    }

    ::std::function<void()>
    getAdminNameAsync(::std::function<void(::std::string)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &Chat::GroupServerPrx::_iceI_getAdminName, context);
    }

    /// \cond INTERNAL
    void _iceI_getAdminName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    Users listUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<Users>(true, this, &GroupServerPrx::_iceI_listUsers, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto listUsersAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Users>>().get_future())
    {
        return _makePromiseOutgoing<Users, P>(false, this, &GroupServerPrx::_iceI_listUsers, context);
    }

    ::std::function<void()>
    listUsersAsync(::std::function<void(Users)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<Users>(response, ex, sent, this, &Chat::GroupServerPrx::_iceI_listUsers, context);
    }

    /// \cond INTERNAL
    void _iceI_listUsers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Users>>&, const ::Ice::Context&);
    /// \endcond

    void join(const ::std::shared_ptr<UserPrx>& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &GroupServerPrx::_iceI_join, user, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto joinAsync(const ::std::shared_ptr<UserPrx>& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &GroupServerPrx::_iceI_join, user, context);
    }

    ::std::function<void()>
    joinAsync(const ::std::shared_ptr<UserPrx>& user,
              ::std::function<void()> response,
              ::std::function<void(::std::exception_ptr)> ex = nullptr,
              ::std::function<void(bool)> sent = nullptr,
              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::GroupServerPrx::_iceI_join, user, context);
    }

    /// \cond INTERNAL
    void _iceI_join(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<UserPrx>&, const ::Ice::Context&);
    /// \endcond

    void leave(const ::std::shared_ptr<UserPrx>& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &GroupServerPrx::_iceI_leave, user, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto leaveAsync(const ::std::shared_ptr<UserPrx>& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &GroupServerPrx::_iceI_leave, user, context);
    }

    ::std::function<void()>
    leaveAsync(const ::std::shared_ptr<UserPrx>& user,
               ::std::function<void()> response,
               ::std::function<void(::std::exception_ptr)> ex = nullptr,
               ::std::function<void(bool)> sent = nullptr,
               const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::GroupServerPrx::_iceI_leave, user, context);
    }

    /// \cond INTERNAL
    void _iceI_leave(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::shared_ptr<UserPrx>&, const ::Ice::Context&);
    /// \endcond

    void sendMessage(const ::std::string& message, const ::std::shared_ptr<UserPrx>& sender, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &GroupServerPrx::_iceI_sendMessage, message, sender, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto sendMessageAsync(const ::std::string& message, const ::std::shared_ptr<UserPrx>& sender, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &GroupServerPrx::_iceI_sendMessage, message, sender, context);
    }

    ::std::function<void()>
    sendMessageAsync(const ::std::string& message, const ::std::shared_ptr<UserPrx>& sender,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::GroupServerPrx::_iceI_sendMessage, message, sender, context);
    }

    /// \cond INTERNAL
    void _iceI_sendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::shared_ptr<UserPrx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    GroupServerPrx() = default;
    friend ::std::shared_ptr<GroupServerPrx> IceInternal::createProxy<GroupServerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class GroupServerManagerPrx : public virtual ::Ice::Proxy<GroupServerManagerPrx, ::Ice::ObjectPrx>
{
public:

    int getGroupsCount(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<int>(true, this, &GroupServerManagerPrx::_iceI_getGroupsCount, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getGroupsCountAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<int>>().get_future())
    {
        return _makePromiseOutgoing<int, P>(false, this, &GroupServerManagerPrx::_iceI_getGroupsCount, context);
    }

    ::std::function<void()>
    getGroupsCountAsync(::std::function<void(int)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<int>(response, ex, sent, this, &Chat::GroupServerManagerPrx::_iceI_getGroupsCount, context);
    }

    /// \cond INTERNAL
    void _iceI_getGroupsCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>&, const ::Ice::Context&);
    /// \endcond

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &GroupServerManagerPrx::_iceI_getName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getNameAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &GroupServerManagerPrx::_iceI_getName, context);
    }

    ::std::function<void()>
    getNameAsync(::std::function<void(::std::string)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &Chat::GroupServerManagerPrx::_iceI_getName, context);
    }

    /// \cond INTERNAL
    void _iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    Groups listGroups(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<Groups>(true, this, &GroupServerManagerPrx::_iceI_listGroups, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto listGroupsAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<Groups>>().get_future())
    {
        return _makePromiseOutgoing<Groups, P>(false, this, &GroupServerManagerPrx::_iceI_listGroups, context);
    }

    ::std::function<void()>
    listGroupsAsync(::std::function<void(Groups)> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<Groups>(response, ex, sent, this, &Chat::GroupServerManagerPrx::_iceI_listGroups, context);
    }

    /// \cond INTERNAL
    void _iceI_listGroups(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Groups>>&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<GroupServerPrx> getGroupServerByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<GroupServerPrx>>(true, this, &GroupServerManagerPrx::_iceI_getGroupServerByName, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getGroupServerByNameAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<GroupServerPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<GroupServerPrx>, P>(false, this, &GroupServerManagerPrx::_iceI_getGroupServerByName, name, context);
    }

    ::std::function<void()>
    getGroupServerByNameAsync(const ::std::string& name,
                              ::std::function<void(::std::shared_ptr<GroupServerPrx>)> response,
                              ::std::function<void(::std::exception_ptr)> ex = nullptr,
                              ::std::function<void(bool)> sent = nullptr,
                              const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<GroupServerPrx>>(response, ex, sent, this, &Chat::GroupServerManagerPrx::_iceI_getGroupServerByName, name, context);
    }

    /// \cond INTERNAL
    void _iceI_getGroupServerByName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<GroupServerPrx>>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    ::std::shared_ptr<GroupServerPrx> createGroup(const ::std::string& name, const ::std::shared_ptr<UserPrx>& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::shared_ptr<GroupServerPrx>>(true, this, &GroupServerManagerPrx::_iceI_createGroup, name, requester, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto createGroupAsync(const ::std::string& name, const ::std::shared_ptr<UserPrx>& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::shared_ptr<GroupServerPrx>>>().get_future())
    {
        return _makePromiseOutgoing<::std::shared_ptr<GroupServerPrx>, P>(false, this, &GroupServerManagerPrx::_iceI_createGroup, name, requester, context);
    }

    ::std::function<void()>
    createGroupAsync(const ::std::string& name, const ::std::shared_ptr<UserPrx>& requester,
                     ::std::function<void(::std::shared_ptr<GroupServerPrx>)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::shared_ptr<GroupServerPrx>>(response, ex, sent, this, &Chat::GroupServerManagerPrx::_iceI_createGroup, name, requester, context);
    }

    /// \cond INTERNAL
    void _iceI_createGroup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<GroupServerPrx>>>&, const ::std::string&, const ::std::shared_ptr<UserPrx>&, const ::Ice::Context&);
    /// \endcond

    void deleteGroup(const ::std::string& name, const ::std::shared_ptr<UserPrx>& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &GroupServerManagerPrx::_iceI_deleteGroup, name, requester, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto deleteGroupAsync(const ::std::string& name, const ::std::shared_ptr<UserPrx>& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &GroupServerManagerPrx::_iceI_deleteGroup, name, requester, context);
    }

    ::std::function<void()>
    deleteGroupAsync(const ::std::string& name, const ::std::shared_ptr<UserPrx>& requester,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::GroupServerManagerPrx::_iceI_deleteGroup, name, requester, context);
    }

    /// \cond INTERNAL
    void _iceI_deleteGroup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::shared_ptr<UserPrx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    GroupServerManagerPrx() = default;
    friend ::std::shared_ptr<GroupServerManagerPrx> IceInternal::createProxy<GroupServerManagerPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

class UserPrx : public virtual ::Ice::Proxy<UserPrx, ::Ice::ObjectPrx>
{
public:

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::std::string>(true, this, &UserPrx::_iceI_getName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getNameAsync(const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::std::string>>().get_future())
    {
        return _makePromiseOutgoing<::std::string, P>(false, this, &UserPrx::_iceI_getName, context);
    }

    ::std::function<void()>
    getNameAsync(::std::function<void(::std::string)> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::std::string>(response, ex, sent, this, &Chat::UserPrx::_iceI_getName, context);
    }

    /// \cond INTERNAL
    void _iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>&, const ::Ice::Context&);
    /// \endcond

    void receiveText(const ::std::string& msg, const ::std::shared_ptr<UserPrx>& sender, const ::std::string& groupName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &UserPrx::_iceI_receiveText, msg, sender, groupName, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto receiveTextAsync(const ::std::string& msg, const ::std::shared_ptr<UserPrx>& sender, const ::std::string& groupName, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &UserPrx::_iceI_receiveText, msg, sender, groupName, context);
    }

    ::std::function<void()>
    receiveTextAsync(const ::std::string& msg, const ::std::shared_ptr<UserPrx>& sender, const ::std::string& groupName,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::UserPrx::_iceI_receiveText, msg, sender, groupName, context);
    }

    /// \cond INTERNAL
    void _iceI_receiveText(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::shared_ptr<UserPrx>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    void receivePrivateText(const ::std::string& msg, const ::std::shared_ptr<UserPrx>& sender, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &UserPrx::_iceI_receivePrivateText, msg, sender, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto receivePrivateTextAsync(const ::std::string& msg, const ::std::shared_ptr<UserPrx>& sender, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &UserPrx::_iceI_receivePrivateText, msg, sender, context);
    }

    ::std::function<void()>
    receivePrivateTextAsync(const ::std::string& msg, const ::std::shared_ptr<UserPrx>& sender,
                            ::std::function<void()> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &Chat::UserPrx::_iceI_receivePrivateText, msg, sender, context);
    }

    /// \cond INTERNAL
    void _iceI_receivePrivateText(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::std::string&, const ::std::shared_ptr<UserPrx>&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    UserPrx() = default;
    friend ::std::shared_ptr<UserPrx> IceInternal::createProxy<UserPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

}
/// \endcond

/// \cond INTERNAL
namespace Chat
{

using CoreServerPtr = ::std::shared_ptr<CoreServer>;
using CoreServerPrxPtr = ::std::shared_ptr<CoreServerPrx>;

using GroupServerPtr = ::std::shared_ptr<GroupServer>;
using GroupServerPrxPtr = ::std::shared_ptr<GroupServerPrx>;

using GroupServerManagerPtr = ::std::shared_ptr<GroupServerManager>;
using GroupServerManagerPrxPtr = ::std::shared_ptr<GroupServerManagerPrx>;

using UserPtr = ::std::shared_ptr<User>;
using UserPrxPtr = ::std::shared_ptr<UserPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace Chat
{

class CoreServer;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< CoreServer>&);
::IceProxy::Ice::Object* upCast(CoreServer*);
/// \endcond

class GroupServer;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< GroupServer>&);
::IceProxy::Ice::Object* upCast(GroupServer*);
/// \endcond

class GroupServerManager;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< GroupServerManager>&);
::IceProxy::Ice::Object* upCast(GroupServerManager*);
/// \endcond

class User;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< User>&);
::IceProxy::Ice::Object* upCast(User*);
/// \endcond

}

}

namespace Chat
{

class CoreServer;
/// \cond INTERNAL
::Ice::Object* upCast(CoreServer*);
/// \endcond
typedef ::IceInternal::Handle< CoreServer> CoreServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::CoreServer> CoreServerPrx;
typedef CoreServerPrx CoreServerPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(CoreServerPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class GroupServer;
/// \cond INTERNAL
::Ice::Object* upCast(GroupServer*);
/// \endcond
typedef ::IceInternal::Handle< GroupServer> GroupServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::GroupServer> GroupServerPrx;
typedef GroupServerPrx GroupServerPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(GroupServerPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class GroupServerManager;
/// \cond INTERNAL
::Ice::Object* upCast(GroupServerManager*);
/// \endcond
typedef ::IceInternal::Handle< GroupServerManager> GroupServerManagerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::GroupServerManager> GroupServerManagerPrx;
typedef GroupServerManagerPrx GroupServerManagerPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(GroupServerManagerPtr&, const ::Ice::ObjectPtr&);
/// \endcond

class User;
/// \cond INTERNAL
::Ice::Object* upCast(User*);
/// \endcond
typedef ::IceInternal::Handle< User> UserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::User> UserPrx;
typedef UserPrx UserPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(UserPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace Chat
{

class NameDoesNotExist : public ::Ice::UserException
{
public:

    NameDoesNotExist() {}
    virtual ~NameDoesNotExist() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual NameDoesNotExist* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
static NameDoesNotExist _iceS_NameDoesNotExist_init;
/// \endcond

class NameAlreadyExists : public ::Ice::UserException
{
public:

    NameAlreadyExists() {}
    virtual ~NameAlreadyExists() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual NameAlreadyExists* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class ServerAlreadyRegistered : public ::Ice::UserException
{
public:

    ServerAlreadyRegistered() {}
    virtual ~ServerAlreadyRegistered() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual ServerAlreadyRegistered* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class ServerDoesNotExist : public ::Ice::UserException
{
public:

    ServerDoesNotExist() {}
    virtual ~ServerDoesNotExist() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual ServerDoesNotExist* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class UserAlreadyRegistered : public ::Ice::UserException
{
public:

    UserAlreadyRegistered() {}
    virtual ~UserAlreadyRegistered() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual UserAlreadyRegistered* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class UserDoesNotExist : public ::Ice::UserException
{
public:

    UserDoesNotExist() {}
    virtual ~UserDoesNotExist() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual UserDoesNotExist* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

class NoPermission : public ::Ice::UserException
{
public:

    NoPermission() {}
    virtual ~NoPermission() throw();

    /**
     * Obtains the Slice type ID of this exception.
     * @return The fully-scoped type ID.
     */
    virtual ::std::string ice_id() const;
    /**
     * Polymporphically clones this exception.
     * @return A shallow copy of this exception.
     */
    virtual NoPermission* ice_clone() const;
    /**
     * Throws this exception.
     */
    virtual void ice_throw() const;

protected:

    /// \cond STREAM
    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
    /// \endcond
};

typedef ::std::vector<GroupServerManagerPrx> GroupManagers;

typedef ::std::vector<GroupServerPrx> Groups;

typedef ::std::vector<UserPrx> Users;

}

namespace Chat
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::CoreServer::begin_getUserByName.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_getUserByName.
 */
class Callback_CoreServer_getUserByName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CoreServer_getUserByName_Base> Callback_CoreServer_getUserByNamePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::CoreServer::begin_listGroups.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_listGroups.
 */
class Callback_CoreServer_listGroups_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CoreServer_listGroups_Base> Callback_CoreServer_listGroupsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::CoreServer::begin_getGroupServerByName.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_getGroupServerByName.
 */
class Callback_CoreServer_getGroupServerByName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CoreServer_getGroupServerByName_Base> Callback_CoreServer_getGroupServerByNamePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::CoreServer::begin_logIn.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_logIn.
 */
class Callback_CoreServer_logIn_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CoreServer_logIn_Base> Callback_CoreServer_logInPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::CoreServer::begin_logOut.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_logOut.
 */
class Callback_CoreServer_logOut_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CoreServer_logOut_Base> Callback_CoreServer_logOutPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::CoreServer::begin_createGroup.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_createGroup.
 */
class Callback_CoreServer_createGroup_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CoreServer_createGroup_Base> Callback_CoreServer_createGroupPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::CoreServer::begin_deleteGroup.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_deleteGroup.
 */
class Callback_CoreServer_deleteGroup_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CoreServer_deleteGroup_Base> Callback_CoreServer_deleteGroupPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::CoreServer::begin_registerServer.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_registerServer.
 */
class Callback_CoreServer_registerServer_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CoreServer_registerServer_Base> Callback_CoreServer_registerServerPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::CoreServer::begin_unregisterServer.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_unregisterServer.
 */
class Callback_CoreServer_unregisterServer_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CoreServer_unregisterServer_Base> Callback_CoreServer_unregisterServerPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::GroupServer::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_getName.
 */
class Callback_GroupServer_getName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GroupServer_getName_Base> Callback_GroupServer_getNamePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::GroupServer::begin_getAdminName.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_getAdminName.
 */
class Callback_GroupServer_getAdminName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GroupServer_getAdminName_Base> Callback_GroupServer_getAdminNamePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::GroupServer::begin_listUsers.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_listUsers.
 */
class Callback_GroupServer_listUsers_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GroupServer_listUsers_Base> Callback_GroupServer_listUsersPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::GroupServer::begin_join.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_join.
 */
class Callback_GroupServer_join_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GroupServer_join_Base> Callback_GroupServer_joinPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::GroupServer::begin_leave.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_leave.
 */
class Callback_GroupServer_leave_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GroupServer_leave_Base> Callback_GroupServer_leavePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::GroupServer::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_sendMessage.
 */
class Callback_GroupServer_sendMessage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GroupServer_sendMessage_Base> Callback_GroupServer_sendMessagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::GroupServerManager::begin_getGroupsCount.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_getGroupsCount.
 */
class Callback_GroupServerManager_getGroupsCount_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GroupServerManager_getGroupsCount_Base> Callback_GroupServerManager_getGroupsCountPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::GroupServerManager::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_getName.
 */
class Callback_GroupServerManager_getName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GroupServerManager_getName_Base> Callback_GroupServerManager_getNamePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::GroupServerManager::begin_listGroups.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_listGroups.
 */
class Callback_GroupServerManager_listGroups_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GroupServerManager_listGroups_Base> Callback_GroupServerManager_listGroupsPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::GroupServerManager::begin_getGroupServerByName.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_getGroupServerByName.
 */
class Callback_GroupServerManager_getGroupServerByName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GroupServerManager_getGroupServerByName_Base> Callback_GroupServerManager_getGroupServerByNamePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::GroupServerManager::begin_createGroup.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_createGroup.
 */
class Callback_GroupServerManager_createGroup_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GroupServerManager_createGroup_Base> Callback_GroupServerManager_createGroupPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::GroupServerManager::begin_deleteGroup.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_deleteGroup.
 */
class Callback_GroupServerManager_deleteGroup_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GroupServerManager_deleteGroup_Base> Callback_GroupServerManager_deleteGroupPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::User::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_User_getName.
 */
class Callback_User_getName_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_getName_Base> Callback_User_getNamePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::User::begin_receiveText.
 * Create a wrapper instance by calling ::Chat::newCallback_User_receiveText.
 */
class Callback_User_receiveText_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_receiveText_Base> Callback_User_receiveTextPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::Chat::User::begin_receivePrivateText.
 * Create a wrapper instance by calling ::Chat::newCallback_User_receivePrivateText.
 */
class Callback_User_receivePrivateText_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_receivePrivateText_Base> Callback_User_receivePrivateTextPtr;

}

namespace IceProxy
{

namespace Chat
{

class CoreServer : public virtual ::Ice::Proxy<CoreServer, ::IceProxy::Ice::Object>
{
public:

    ::Chat::UserPrx getUserByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getUserByName(_iceI_begin_getUserByName(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getUserByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getUserByName(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUserByName(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUserByName(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUserByName(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUserByName(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUserByName(const ::std::string& name, const ::Chat::Callback_CoreServer_getUserByNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUserByName(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getUserByName(const ::std::string& name, const ::Ice::Context& context, const ::Chat::Callback_CoreServer_getUserByNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getUserByName(name, context, cb, cookie);
    }

    ::Chat::UserPrx end_getUserByName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getUserByName(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::Groups listGroups(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_listGroups(_iceI_begin_listGroups(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_listGroups(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_listGroups(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_listGroups(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listGroups(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listGroups(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listGroups(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listGroups(const ::Chat::Callback_CoreServer_listGroupsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listGroups(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listGroups(const ::Ice::Context& context, const ::Chat::Callback_CoreServer_listGroupsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listGroups(context, cb, cookie);
    }

    ::Chat::Groups end_listGroups(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_listGroups(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::GroupServerPrx getGroupServerByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getGroupServerByName(_iceI_begin_getGroupServerByName(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getGroupServerByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getGroupServerByName(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGroupServerByName(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGroupServerByName(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroupServerByName(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGroupServerByName(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroupServerByName(const ::std::string& name, const ::Chat::Callback_CoreServer_getGroupServerByNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGroupServerByName(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroupServerByName(const ::std::string& name, const ::Ice::Context& context, const ::Chat::Callback_CoreServer_getGroupServerByNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGroupServerByName(name, context, cb, cookie);
    }

    ::Chat::GroupServerPrx end_getGroupServerByName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getGroupServerByName(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void logIn(const ::Chat::UserPrx& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_logIn(_iceI_begin_logIn(user, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_logIn(const ::Chat::UserPrx& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_logIn(user, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_logIn(const ::Chat::UserPrx& user, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_logIn(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_logIn(const ::Chat::UserPrx& user, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_logIn(user, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_logIn(const ::Chat::UserPrx& user, const ::Chat::Callback_CoreServer_logInPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_logIn(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_logIn(const ::Chat::UserPrx& user, const ::Ice::Context& context, const ::Chat::Callback_CoreServer_logInPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_logIn(user, context, cb, cookie);
    }

    void end_logIn(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_logIn(const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void logOut(const ::Chat::UserPrx& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_logOut(_iceI_begin_logOut(user, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_logOut(const ::Chat::UserPrx& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_logOut(user, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_logOut(const ::Chat::UserPrx& user, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_logOut(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_logOut(const ::Chat::UserPrx& user, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_logOut(user, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_logOut(const ::Chat::UserPrx& user, const ::Chat::Callback_CoreServer_logOutPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_logOut(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_logOut(const ::Chat::UserPrx& user, const ::Ice::Context& context, const ::Chat::Callback_CoreServer_logOutPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_logOut(user, context, cb, cookie);
    }

    void end_logOut(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_logOut(const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void createGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_createGroup(_iceI_begin_createGroup(name, requester, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_createGroup(name, requester, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createGroup(name, requester, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createGroup(name, requester, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Chat::Callback_CoreServer_createGroupPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createGroup(name, requester, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context, const ::Chat::Callback_CoreServer_createGroupPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createGroup(name, requester, context, cb, cookie);
    }

    void end_createGroup(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_createGroup(const ::std::string&, const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void deleteGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_deleteGroup(_iceI_begin_deleteGroup(name, requester, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_deleteGroup(name, requester, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deleteGroup(name, requester, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deleteGroup(name, requester, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Chat::Callback_CoreServer_deleteGroupPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deleteGroup(name, requester, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context, const ::Chat::Callback_CoreServer_deleteGroupPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deleteGroup(name, requester, context, cb, cookie);
    }

    void end_deleteGroup(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_deleteGroup(const ::std::string&, const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void registerServer(const ::Chat::GroupServerManagerPrx& serverManager, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_registerServer(_iceI_begin_registerServer(serverManager, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_registerServer(const ::Chat::GroupServerManagerPrx& serverManager, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_registerServer(serverManager, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerServer(const ::Chat::GroupServerManagerPrx& serverManager, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerServer(serverManager, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerServer(const ::Chat::GroupServerManagerPrx& serverManager, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerServer(serverManager, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerServer(const ::Chat::GroupServerManagerPrx& serverManager, const ::Chat::Callback_CoreServer_registerServerPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerServer(serverManager, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_registerServer(const ::Chat::GroupServerManagerPrx& serverManager, const ::Ice::Context& context, const ::Chat::Callback_CoreServer_registerServerPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_registerServer(serverManager, context, cb, cookie);
    }

    void end_registerServer(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_registerServer(const ::Chat::GroupServerManagerPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void unregisterServer(const ::Chat::GroupServerManagerPrx& serverManager, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_unregisterServer(_iceI_begin_unregisterServer(serverManager, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_unregisterServer(const ::Chat::GroupServerManagerPrx& serverManager, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_unregisterServer(serverManager, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_unregisterServer(const ::Chat::GroupServerManagerPrx& serverManager, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterServer(serverManager, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterServer(const ::Chat::GroupServerManagerPrx& serverManager, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterServer(serverManager, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterServer(const ::Chat::GroupServerManagerPrx& serverManager, const ::Chat::Callback_CoreServer_unregisterServerPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterServer(serverManager, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_unregisterServer(const ::Chat::GroupServerManagerPrx& serverManager, const ::Ice::Context& context, const ::Chat::Callback_CoreServer_unregisterServerPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_unregisterServer(serverManager, context, cb, cookie);
    }

    void end_unregisterServer(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_unregisterServer(const ::Chat::GroupServerManagerPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class GroupServer : public virtual ::Ice::Proxy<GroupServer, ::IceProxy::Ice::Object>
{
public:

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getName(_iceI_begin_getName(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getName(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Chat::Callback_GroupServer_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Chat::Callback_GroupServer_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getName(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getAdminName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getAdminName(_iceI_begin_getAdminName(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAdminName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAdminName(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAdminName(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAdminName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAdminName(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAdminName(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAdminName(const ::Chat::Callback_GroupServer_getAdminNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAdminName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAdminName(const ::Ice::Context& context, const ::Chat::Callback_GroupServer_getAdminNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAdminName(context, cb, cookie);
    }

    ::std::string end_getAdminName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAdminName(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::Users listUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_listUsers(_iceI_begin_listUsers(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_listUsers(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_listUsers(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_listUsers(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listUsers(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listUsers(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listUsers(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listUsers(const ::Chat::Callback_GroupServer_listUsersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listUsers(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listUsers(const ::Ice::Context& context, const ::Chat::Callback_GroupServer_listUsersPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listUsers(context, cb, cookie);
    }

    ::Chat::Users end_listUsers(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_listUsers(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void join(const ::Chat::UserPrx& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_join(_iceI_begin_join(user, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_join(const ::Chat::UserPrx& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_join(user, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_join(const ::Chat::UserPrx& user, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_join(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_join(const ::Chat::UserPrx& user, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_join(user, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_join(const ::Chat::UserPrx& user, const ::Chat::Callback_GroupServer_joinPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_join(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_join(const ::Chat::UserPrx& user, const ::Ice::Context& context, const ::Chat::Callback_GroupServer_joinPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_join(user, context, cb, cookie);
    }

    void end_join(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_join(const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void leave(const ::Chat::UserPrx& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_leave(_iceI_begin_leave(user, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_leave(const ::Chat::UserPrx& user, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_leave(user, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_leave(const ::Chat::UserPrx& user, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_leave(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_leave(const ::Chat::UserPrx& user, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_leave(user, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_leave(const ::Chat::UserPrx& user, const ::Chat::Callback_GroupServer_leavePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_leave(user, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_leave(const ::Chat::UserPrx& user, const ::Ice::Context& context, const ::Chat::Callback_GroupServer_leavePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_leave(user, context, cb, cookie);
    }

    void end_leave(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_leave(const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void sendMessage(const ::std::string& message, const ::Chat::UserPrx& sender, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_sendMessage(_iceI_begin_sendMessage(message, sender, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::std::string& message, const ::Chat::UserPrx& sender, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_sendMessage(message, sender, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::std::string& message, const ::Chat::UserPrx& sender, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(message, sender, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::std::string& message, const ::Chat::UserPrx& sender, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(message, sender, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::std::string& message, const ::Chat::UserPrx& sender, const ::Chat::Callback_GroupServer_sendMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(message, sender, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_sendMessage(const ::std::string& message, const ::Chat::UserPrx& sender, const ::Ice::Context& context, const ::Chat::Callback_GroupServer_sendMessagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_sendMessage(message, sender, context, cb, cookie);
    }

    void end_sendMessage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_sendMessage(const ::std::string&, const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class GroupServerManager : public virtual ::Ice::Proxy<GroupServerManager, ::IceProxy::Ice::Object>
{
public:

    ::Ice::Int getGroupsCount(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getGroupsCount(_iceI_begin_getGroupsCount(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getGroupsCount(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getGroupsCount(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGroupsCount(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGroupsCount(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroupsCount(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGroupsCount(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroupsCount(const ::Chat::Callback_GroupServerManager_getGroupsCountPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGroupsCount(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroupsCount(const ::Ice::Context& context, const ::Chat::Callback_GroupServerManager_getGroupsCountPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGroupsCount(context, cb, cookie);
    }

    ::Ice::Int end_getGroupsCount(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getGroupsCount(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getName(_iceI_begin_getName(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getName(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Chat::Callback_GroupServerManager_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Chat::Callback_GroupServerManager_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getName(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::Groups listGroups(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_listGroups(_iceI_begin_listGroups(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_listGroups(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_listGroups(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_listGroups(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listGroups(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listGroups(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listGroups(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listGroups(const ::Chat::Callback_GroupServerManager_listGroupsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listGroups(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_listGroups(const ::Ice::Context& context, const ::Chat::Callback_GroupServerManager_listGroupsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_listGroups(context, cb, cookie);
    }

    ::Chat::Groups end_listGroups(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_listGroups(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::GroupServerPrx getGroupServerByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getGroupServerByName(_iceI_begin_getGroupServerByName(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getGroupServerByName(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getGroupServerByName(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getGroupServerByName(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGroupServerByName(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroupServerByName(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGroupServerByName(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroupServerByName(const ::std::string& name, const ::Chat::Callback_GroupServerManager_getGroupServerByNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGroupServerByName(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getGroupServerByName(const ::std::string& name, const ::Ice::Context& context, const ::Chat::Callback_GroupServerManager_getGroupServerByNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getGroupServerByName(name, context, cb, cookie);
    }

    ::Chat::GroupServerPrx end_getGroupServerByName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getGroupServerByName(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::Chat::GroupServerPrx createGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_createGroup(_iceI_begin_createGroup(name, requester, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_createGroup(name, requester, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createGroup(name, requester, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createGroup(name, requester, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Chat::Callback_GroupServerManager_createGroupPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createGroup(name, requester, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_createGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context, const ::Chat::Callback_GroupServerManager_createGroupPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_createGroup(name, requester, context, cb, cookie);
    }

    ::Chat::GroupServerPrx end_createGroup(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_createGroup(const ::std::string&, const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void deleteGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_deleteGroup(_iceI_begin_deleteGroup(name, requester, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_deleteGroup(name, requester, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deleteGroup(name, requester, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deleteGroup(name, requester, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Chat::Callback_GroupServerManager_deleteGroupPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deleteGroup(name, requester, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_deleteGroup(const ::std::string& name, const ::Chat::UserPrx& requester, const ::Ice::Context& context, const ::Chat::Callback_GroupServerManager_deleteGroupPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_deleteGroup(name, requester, context, cb, cookie);
    }

    void end_deleteGroup(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_deleteGroup(const ::std::string&, const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

class User : public virtual ::Ice::Proxy<User, ::IceProxy::Ice::Object>
{
public:

    ::std::string getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getName(_iceI_begin_getName(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getName(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Chat::Callback_User_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& context, const ::Chat::Callback_User_getNamePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getName(context, cb, cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getName(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void receiveText(const ::std::string& msg, const ::Chat::UserPrx& sender, const ::std::string& groupName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_receiveText(_iceI_begin_receiveText(msg, sender, groupName, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_receiveText(const ::std::string& msg, const ::Chat::UserPrx& sender, const ::std::string& groupName, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_receiveText(msg, sender, groupName, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receiveText(const ::std::string& msg, const ::Chat::UserPrx& sender, const ::std::string& groupName, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_receiveText(msg, sender, groupName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveText(const ::std::string& msg, const ::Chat::UserPrx& sender, const ::std::string& groupName, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_receiveText(msg, sender, groupName, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveText(const ::std::string& msg, const ::Chat::UserPrx& sender, const ::std::string& groupName, const ::Chat::Callback_User_receiveTextPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_receiveText(msg, sender, groupName, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_receiveText(const ::std::string& msg, const ::Chat::UserPrx& sender, const ::std::string& groupName, const ::Ice::Context& context, const ::Chat::Callback_User_receiveTextPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_receiveText(msg, sender, groupName, context, cb, cookie);
    }

    void end_receiveText(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_receiveText(const ::std::string&, const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void receivePrivateText(const ::std::string& msg, const ::Chat::UserPrx& sender, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_receivePrivateText(_iceI_begin_receivePrivateText(msg, sender, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_receivePrivateText(const ::std::string& msg, const ::Chat::UserPrx& sender, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_receivePrivateText(msg, sender, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receivePrivateText(const ::std::string& msg, const ::Chat::UserPrx& sender, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_receivePrivateText(msg, sender, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_receivePrivateText(const ::std::string& msg, const ::Chat::UserPrx& sender, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_receivePrivateText(msg, sender, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_receivePrivateText(const ::std::string& msg, const ::Chat::UserPrx& sender, const ::Chat::Callback_User_receivePrivateTextPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_receivePrivateText(msg, sender, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_receivePrivateText(const ::std::string& msg, const ::Chat::UserPrx& sender, const ::Ice::Context& context, const ::Chat::Callback_User_receivePrivateTextPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_receivePrivateText(msg, sender, context, cb, cookie);
    }

    void end_receivePrivateText(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_receivePrivateText(const ::std::string&, const ::Chat::UserPrx&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace Chat
{

class CoreServer : public virtual ::Ice::Object
{
public:

    typedef CoreServerPrx ProxyType;
    typedef CoreServerPtr PointerType;

    virtual ~CoreServer();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual UserPrx getUserByName(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getUserByName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Groups listGroups(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_listGroups(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual GroupServerPrx getGroupServerByName(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getGroupServerByName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void logIn(const UserPrx& user, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_logIn(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void logOut(const UserPrx& user, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_logOut(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void createGroup(const ::std::string& name, const UserPrx& requester, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_createGroup(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void deleteGroup(const ::std::string& name, const UserPrx& requester, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_deleteGroup(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void registerServer(const GroupServerManagerPrx& serverManager, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_registerServer(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void unregisterServer(const GroupServerManagerPrx& serverManager, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_unregisterServer(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const CoreServer& lhs, const CoreServer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const CoreServer& lhs, const CoreServer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class GroupServer : public virtual ::Ice::Object
{
public:

    typedef GroupServerPrx ProxyType;
    typedef GroupServerPtr PointerType;

    virtual ~GroupServer();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::string getName(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getAdminName(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getAdminName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Users listUsers(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_listUsers(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void join(const UserPrx& user, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_join(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void leave(const UserPrx& user, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_leave(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void sendMessage(const ::std::string& message, const UserPrx& sender, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_sendMessage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const GroupServer& lhs, const GroupServer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const GroupServer& lhs, const GroupServer& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class GroupServerManager : public virtual ::Ice::Object
{
public:

    typedef GroupServerManagerPrx ProxyType;
    typedef GroupServerManagerPtr PointerType;

    virtual ~GroupServerManager();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int getGroupsCount(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getGroupsCount(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual ::std::string getName(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual Groups listGroups(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_listGroups(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual GroupServerPrx getGroupServerByName(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getGroupServerByName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual GroupServerPrx createGroup(const ::std::string& name, const UserPrx& requester, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_createGroup(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void deleteGroup(const ::std::string& name, const UserPrx& requester, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_deleteGroup(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const GroupServerManager& lhs, const GroupServerManager& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const GroupServerManager& lhs, const GroupServerManager& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

class User : public virtual ::Ice::Object
{
public:

    typedef UserPrx ProxyType;
    typedef UserPtr PointerType;

    virtual ~User();

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual ::std::string getName(const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getName(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void receiveText(const ::std::string& msg, const UserPrx& sender, const ::std::string& groupName, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_receiveText(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual void receivePrivateText(const ::std::string& msg, const UserPrx& sender, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_receivePrivateText(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const User& lhs, const User& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const User& lhs, const User& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::Chat::NameDoesNotExist>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::NameAlreadyExists>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::ServerAlreadyRegistered>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::ServerDoesNotExist>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::UserAlreadyRegistered>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::UserDoesNotExist>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::NoPermission>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}
/// \endcond

namespace Chat
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::CoreServer::begin_getUserByName.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_getUserByName.
 */
template<class T>
class CallbackNC_CoreServer_getUserByName : public Callback_CoreServer_getUserByName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const UserPrx&);

    CallbackNC_CoreServer_getUserByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        UserPrx ret;
        try
        {
            ret = proxy->end_getUserByName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_getUserByName.
 */
template<class T> Callback_CoreServer_getUserByNamePtr
newCallback_CoreServer_getUserByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const UserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_getUserByName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_getUserByName.
 */
template<class T> Callback_CoreServer_getUserByNamePtr
newCallback_CoreServer_getUserByName(T* instance, void (T::*cb)(const UserPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_getUserByName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::CoreServer::begin_getUserByName.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_getUserByName.
 */
template<class T, typename CT>
class Callback_CoreServer_getUserByName : public Callback_CoreServer_getUserByName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const UserPrx&, const CT&);

    Callback_CoreServer_getUserByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        UserPrx ret;
        try
        {
            ret = proxy->end_getUserByName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_getUserByName.
 */
template<class T, typename CT> Callback_CoreServer_getUserByNamePtr
newCallback_CoreServer_getUserByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const UserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_getUserByName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_getUserByName.
 */
template<class T, typename CT> Callback_CoreServer_getUserByNamePtr
newCallback_CoreServer_getUserByName(T* instance, void (T::*cb)(const UserPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_getUserByName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::CoreServer::begin_listGroups.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_listGroups.
 */
template<class T>
class CallbackNC_CoreServer_listGroups : public Callback_CoreServer_listGroups_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Groups&);

    CallbackNC_CoreServer_listGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        Groups ret;
        try
        {
            ret = proxy->end_listGroups(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_listGroups.
 */
template<class T> Callback_CoreServer_listGroupsPtr
newCallback_CoreServer_listGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(const Groups&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_listGroups<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_listGroups.
 */
template<class T> Callback_CoreServer_listGroupsPtr
newCallback_CoreServer_listGroups(T* instance, void (T::*cb)(const Groups&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_listGroups<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::CoreServer::begin_listGroups.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_listGroups.
 */
template<class T, typename CT>
class Callback_CoreServer_listGroups : public Callback_CoreServer_listGroups_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Groups&, const CT&);

    Callback_CoreServer_listGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        Groups ret;
        try
        {
            ret = proxy->end_listGroups(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_listGroups.
 */
template<class T, typename CT> Callback_CoreServer_listGroupsPtr
newCallback_CoreServer_listGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(const Groups&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_listGroups<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_listGroups.
 */
template<class T, typename CT> Callback_CoreServer_listGroupsPtr
newCallback_CoreServer_listGroups(T* instance, void (T::*cb)(const Groups&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_listGroups<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::CoreServer::begin_getGroupServerByName.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_getGroupServerByName.
 */
template<class T>
class CallbackNC_CoreServer_getGroupServerByName : public Callback_CoreServer_getGroupServerByName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const GroupServerPrx&);

    CallbackNC_CoreServer_getGroupServerByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        GroupServerPrx ret;
        try
        {
            ret = proxy->end_getGroupServerByName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_getGroupServerByName.
 */
template<class T> Callback_CoreServer_getGroupServerByNamePtr
newCallback_CoreServer_getGroupServerByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const GroupServerPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_getGroupServerByName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_getGroupServerByName.
 */
template<class T> Callback_CoreServer_getGroupServerByNamePtr
newCallback_CoreServer_getGroupServerByName(T* instance, void (T::*cb)(const GroupServerPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_getGroupServerByName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::CoreServer::begin_getGroupServerByName.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_getGroupServerByName.
 */
template<class T, typename CT>
class Callback_CoreServer_getGroupServerByName : public Callback_CoreServer_getGroupServerByName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const GroupServerPrx&, const CT&);

    Callback_CoreServer_getGroupServerByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        GroupServerPrx ret;
        try
        {
            ret = proxy->end_getGroupServerByName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_getGroupServerByName.
 */
template<class T, typename CT> Callback_CoreServer_getGroupServerByNamePtr
newCallback_CoreServer_getGroupServerByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const GroupServerPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_getGroupServerByName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_getGroupServerByName.
 */
template<class T, typename CT> Callback_CoreServer_getGroupServerByNamePtr
newCallback_CoreServer_getGroupServerByName(T* instance, void (T::*cb)(const GroupServerPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_getGroupServerByName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::CoreServer::begin_logIn.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_logIn.
 */
template<class T>
class CallbackNC_CoreServer_logIn : public Callback_CoreServer_logIn_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CoreServer_logIn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_logIn(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logIn.
 */
template<class T> Callback_CoreServer_logInPtr
newCallback_CoreServer_logIn(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_logIn<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logIn.
 */
template<class T> Callback_CoreServer_logInPtr
newCallback_CoreServer_logIn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_logIn<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logIn.
 */
template<class T> Callback_CoreServer_logInPtr
newCallback_CoreServer_logIn(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_logIn<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logIn.
 */
template<class T> Callback_CoreServer_logInPtr
newCallback_CoreServer_logIn(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_logIn<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::CoreServer::begin_logIn.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_logIn.
 */
template<class T, typename CT>
class Callback_CoreServer_logIn : public Callback_CoreServer_logIn_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CoreServer_logIn(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_logIn(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logIn.
 */
template<class T, typename CT> Callback_CoreServer_logInPtr
newCallback_CoreServer_logIn(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_logIn<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logIn.
 */
template<class T, typename CT> Callback_CoreServer_logInPtr
newCallback_CoreServer_logIn(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_logIn<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logIn.
 */
template<class T, typename CT> Callback_CoreServer_logInPtr
newCallback_CoreServer_logIn(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_logIn<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logIn.
 */
template<class T, typename CT> Callback_CoreServer_logInPtr
newCallback_CoreServer_logIn(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_logIn<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::CoreServer::begin_logOut.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_logOut.
 */
template<class T>
class CallbackNC_CoreServer_logOut : public Callback_CoreServer_logOut_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CoreServer_logOut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_logOut(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logOut.
 */
template<class T> Callback_CoreServer_logOutPtr
newCallback_CoreServer_logOut(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_logOut<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logOut.
 */
template<class T> Callback_CoreServer_logOutPtr
newCallback_CoreServer_logOut(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_logOut<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logOut.
 */
template<class T> Callback_CoreServer_logOutPtr
newCallback_CoreServer_logOut(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_logOut<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logOut.
 */
template<class T> Callback_CoreServer_logOutPtr
newCallback_CoreServer_logOut(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_logOut<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::CoreServer::begin_logOut.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_logOut.
 */
template<class T, typename CT>
class Callback_CoreServer_logOut : public Callback_CoreServer_logOut_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CoreServer_logOut(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_logOut(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logOut.
 */
template<class T, typename CT> Callback_CoreServer_logOutPtr
newCallback_CoreServer_logOut(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_logOut<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logOut.
 */
template<class T, typename CT> Callback_CoreServer_logOutPtr
newCallback_CoreServer_logOut(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_logOut<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logOut.
 */
template<class T, typename CT> Callback_CoreServer_logOutPtr
newCallback_CoreServer_logOut(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_logOut<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_logOut.
 */
template<class T, typename CT> Callback_CoreServer_logOutPtr
newCallback_CoreServer_logOut(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_logOut<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::CoreServer::begin_createGroup.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_createGroup.
 */
template<class T>
class CallbackNC_CoreServer_createGroup : public Callback_CoreServer_createGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CoreServer_createGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_createGroup(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_createGroup.
 */
template<class T> Callback_CoreServer_createGroupPtr
newCallback_CoreServer_createGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_createGroup<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_createGroup.
 */
template<class T> Callback_CoreServer_createGroupPtr
newCallback_CoreServer_createGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_createGroup<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_createGroup.
 */
template<class T> Callback_CoreServer_createGroupPtr
newCallback_CoreServer_createGroup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_createGroup<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_createGroup.
 */
template<class T> Callback_CoreServer_createGroupPtr
newCallback_CoreServer_createGroup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_createGroup<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::CoreServer::begin_createGroup.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_createGroup.
 */
template<class T, typename CT>
class Callback_CoreServer_createGroup : public Callback_CoreServer_createGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CoreServer_createGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_createGroup(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_createGroup.
 */
template<class T, typename CT> Callback_CoreServer_createGroupPtr
newCallback_CoreServer_createGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_createGroup<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_createGroup.
 */
template<class T, typename CT> Callback_CoreServer_createGroupPtr
newCallback_CoreServer_createGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_createGroup<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_createGroup.
 */
template<class T, typename CT> Callback_CoreServer_createGroupPtr
newCallback_CoreServer_createGroup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_createGroup<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_createGroup.
 */
template<class T, typename CT> Callback_CoreServer_createGroupPtr
newCallback_CoreServer_createGroup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_createGroup<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::CoreServer::begin_deleteGroup.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_deleteGroup.
 */
template<class T>
class CallbackNC_CoreServer_deleteGroup : public Callback_CoreServer_deleteGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CoreServer_deleteGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_deleteGroup(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_deleteGroup.
 */
template<class T> Callback_CoreServer_deleteGroupPtr
newCallback_CoreServer_deleteGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_deleteGroup<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_deleteGroup.
 */
template<class T> Callback_CoreServer_deleteGroupPtr
newCallback_CoreServer_deleteGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_deleteGroup<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_deleteGroup.
 */
template<class T> Callback_CoreServer_deleteGroupPtr
newCallback_CoreServer_deleteGroup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_deleteGroup<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_deleteGroup.
 */
template<class T> Callback_CoreServer_deleteGroupPtr
newCallback_CoreServer_deleteGroup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_deleteGroup<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::CoreServer::begin_deleteGroup.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_deleteGroup.
 */
template<class T, typename CT>
class Callback_CoreServer_deleteGroup : public Callback_CoreServer_deleteGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CoreServer_deleteGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_deleteGroup(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_deleteGroup.
 */
template<class T, typename CT> Callback_CoreServer_deleteGroupPtr
newCallback_CoreServer_deleteGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_deleteGroup<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_deleteGroup.
 */
template<class T, typename CT> Callback_CoreServer_deleteGroupPtr
newCallback_CoreServer_deleteGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_deleteGroup<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_deleteGroup.
 */
template<class T, typename CT> Callback_CoreServer_deleteGroupPtr
newCallback_CoreServer_deleteGroup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_deleteGroup<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_deleteGroup.
 */
template<class T, typename CT> Callback_CoreServer_deleteGroupPtr
newCallback_CoreServer_deleteGroup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_deleteGroup<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::CoreServer::begin_registerServer.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_registerServer.
 */
template<class T>
class CallbackNC_CoreServer_registerServer : public Callback_CoreServer_registerServer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CoreServer_registerServer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_registerServer(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_registerServer.
 */
template<class T> Callback_CoreServer_registerServerPtr
newCallback_CoreServer_registerServer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_registerServer<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_registerServer.
 */
template<class T> Callback_CoreServer_registerServerPtr
newCallback_CoreServer_registerServer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_registerServer<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_registerServer.
 */
template<class T> Callback_CoreServer_registerServerPtr
newCallback_CoreServer_registerServer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_registerServer<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_registerServer.
 */
template<class T> Callback_CoreServer_registerServerPtr
newCallback_CoreServer_registerServer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_registerServer<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::CoreServer::begin_registerServer.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_registerServer.
 */
template<class T, typename CT>
class Callback_CoreServer_registerServer : public Callback_CoreServer_registerServer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CoreServer_registerServer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_registerServer(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_registerServer.
 */
template<class T, typename CT> Callback_CoreServer_registerServerPtr
newCallback_CoreServer_registerServer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_registerServer<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_registerServer.
 */
template<class T, typename CT> Callback_CoreServer_registerServerPtr
newCallback_CoreServer_registerServer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_registerServer<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_registerServer.
 */
template<class T, typename CT> Callback_CoreServer_registerServerPtr
newCallback_CoreServer_registerServer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_registerServer<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_registerServer.
 */
template<class T, typename CT> Callback_CoreServer_registerServerPtr
newCallback_CoreServer_registerServer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_registerServer<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::CoreServer::begin_unregisterServer.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_unregisterServer.
 */
template<class T>
class CallbackNC_CoreServer_unregisterServer : public Callback_CoreServer_unregisterServer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CoreServer_unregisterServer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_unregisterServer(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_unregisterServer.
 */
template<class T> Callback_CoreServer_unregisterServerPtr
newCallback_CoreServer_unregisterServer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_unregisterServer<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_unregisterServer.
 */
template<class T> Callback_CoreServer_unregisterServerPtr
newCallback_CoreServer_unregisterServer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_unregisterServer<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_unregisterServer.
 */
template<class T> Callback_CoreServer_unregisterServerPtr
newCallback_CoreServer_unregisterServer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_unregisterServer<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_unregisterServer.
 */
template<class T> Callback_CoreServer_unregisterServerPtr
newCallback_CoreServer_unregisterServer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CoreServer_unregisterServer<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::CoreServer::begin_unregisterServer.
 * Create a wrapper instance by calling ::Chat::newCallback_CoreServer_unregisterServer.
 */
template<class T, typename CT>
class Callback_CoreServer_unregisterServer : public Callback_CoreServer_unregisterServer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CoreServer_unregisterServer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        CoreServerPrx proxy = CoreServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_unregisterServer(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_unregisterServer.
 */
template<class T, typename CT> Callback_CoreServer_unregisterServerPtr
newCallback_CoreServer_unregisterServer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_unregisterServer<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_unregisterServer.
 */
template<class T, typename CT> Callback_CoreServer_unregisterServerPtr
newCallback_CoreServer_unregisterServer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_unregisterServer<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_unregisterServer.
 */
template<class T, typename CT> Callback_CoreServer_unregisterServerPtr
newCallback_CoreServer_unregisterServer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_unregisterServer<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::CoreServer::begin_unregisterServer.
 */
template<class T, typename CT> Callback_CoreServer_unregisterServerPtr
newCallback_CoreServer_unregisterServer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CoreServer_unregisterServer<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::GroupServer::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_getName.
 */
template<class T>
class CallbackNC_GroupServer_getName : public Callback_GroupServer_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_GroupServer_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerPrx proxy = GroupServerPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_getName.
 */
template<class T> Callback_GroupServer_getNamePtr
newCallback_GroupServer_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_getName.
 */
template<class T> Callback_GroupServer_getNamePtr
newCallback_GroupServer_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::GroupServer::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_getName.
 */
template<class T, typename CT>
class Callback_GroupServer_getName : public Callback_GroupServer_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_GroupServer_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerPrx proxy = GroupServerPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_getName.
 */
template<class T, typename CT> Callback_GroupServer_getNamePtr
newCallback_GroupServer_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_getName.
 */
template<class T, typename CT> Callback_GroupServer_getNamePtr
newCallback_GroupServer_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::GroupServer::begin_getAdminName.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_getAdminName.
 */
template<class T>
class CallbackNC_GroupServer_getAdminName : public Callback_GroupServer_getAdminName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_GroupServer_getAdminName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerPrx proxy = GroupServerPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getAdminName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_getAdminName.
 */
template<class T> Callback_GroupServer_getAdminNamePtr
newCallback_GroupServer_getAdminName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_getAdminName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_getAdminName.
 */
template<class T> Callback_GroupServer_getAdminNamePtr
newCallback_GroupServer_getAdminName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_getAdminName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::GroupServer::begin_getAdminName.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_getAdminName.
 */
template<class T, typename CT>
class Callback_GroupServer_getAdminName : public Callback_GroupServer_getAdminName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_GroupServer_getAdminName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerPrx proxy = GroupServerPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getAdminName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_getAdminName.
 */
template<class T, typename CT> Callback_GroupServer_getAdminNamePtr
newCallback_GroupServer_getAdminName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_getAdminName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_getAdminName.
 */
template<class T, typename CT> Callback_GroupServer_getAdminNamePtr
newCallback_GroupServer_getAdminName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_getAdminName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::GroupServer::begin_listUsers.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_listUsers.
 */
template<class T>
class CallbackNC_GroupServer_listUsers : public Callback_GroupServer_listUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Users&);

    CallbackNC_GroupServer_listUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerPrx proxy = GroupServerPrx::uncheckedCast(result->getProxy());
        Users ret;
        try
        {
            ret = proxy->end_listUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_listUsers.
 */
template<class T> Callback_GroupServer_listUsersPtr
newCallback_GroupServer_listUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const Users&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_listUsers<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_listUsers.
 */
template<class T> Callback_GroupServer_listUsersPtr
newCallback_GroupServer_listUsers(T* instance, void (T::*cb)(const Users&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_listUsers<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::GroupServer::begin_listUsers.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_listUsers.
 */
template<class T, typename CT>
class Callback_GroupServer_listUsers : public Callback_GroupServer_listUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Users&, const CT&);

    Callback_GroupServer_listUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerPrx proxy = GroupServerPrx::uncheckedCast(result->getProxy());
        Users ret;
        try
        {
            ret = proxy->end_listUsers(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_listUsers.
 */
template<class T, typename CT> Callback_GroupServer_listUsersPtr
newCallback_GroupServer_listUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const Users&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_listUsers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_listUsers.
 */
template<class T, typename CT> Callback_GroupServer_listUsersPtr
newCallback_GroupServer_listUsers(T* instance, void (T::*cb)(const Users&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_listUsers<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::GroupServer::begin_join.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_join.
 */
template<class T>
class CallbackNC_GroupServer_join : public Callback_GroupServer_join_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GroupServer_join(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerPrx proxy = GroupServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_join(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_join.
 */
template<class T> Callback_GroupServer_joinPtr
newCallback_GroupServer_join(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_join<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_join.
 */
template<class T> Callback_GroupServer_joinPtr
newCallback_GroupServer_join(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_join<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_join.
 */
template<class T> Callback_GroupServer_joinPtr
newCallback_GroupServer_join(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_join<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_join.
 */
template<class T> Callback_GroupServer_joinPtr
newCallback_GroupServer_join(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_join<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::GroupServer::begin_join.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_join.
 */
template<class T, typename CT>
class Callback_GroupServer_join : public Callback_GroupServer_join_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GroupServer_join(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerPrx proxy = GroupServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_join(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_join.
 */
template<class T, typename CT> Callback_GroupServer_joinPtr
newCallback_GroupServer_join(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_join<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_join.
 */
template<class T, typename CT> Callback_GroupServer_joinPtr
newCallback_GroupServer_join(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_join<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_join.
 */
template<class T, typename CT> Callback_GroupServer_joinPtr
newCallback_GroupServer_join(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_join<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_join.
 */
template<class T, typename CT> Callback_GroupServer_joinPtr
newCallback_GroupServer_join(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_join<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::GroupServer::begin_leave.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_leave.
 */
template<class T>
class CallbackNC_GroupServer_leave : public Callback_GroupServer_leave_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GroupServer_leave(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerPrx proxy = GroupServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_leave(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_leave.
 */
template<class T> Callback_GroupServer_leavePtr
newCallback_GroupServer_leave(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_leave<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_leave.
 */
template<class T> Callback_GroupServer_leavePtr
newCallback_GroupServer_leave(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_leave<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_leave.
 */
template<class T> Callback_GroupServer_leavePtr
newCallback_GroupServer_leave(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_leave<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_leave.
 */
template<class T> Callback_GroupServer_leavePtr
newCallback_GroupServer_leave(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_leave<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::GroupServer::begin_leave.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_leave.
 */
template<class T, typename CT>
class Callback_GroupServer_leave : public Callback_GroupServer_leave_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GroupServer_leave(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerPrx proxy = GroupServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_leave(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_leave.
 */
template<class T, typename CT> Callback_GroupServer_leavePtr
newCallback_GroupServer_leave(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_leave<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_leave.
 */
template<class T, typename CT> Callback_GroupServer_leavePtr
newCallback_GroupServer_leave(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_leave<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_leave.
 */
template<class T, typename CT> Callback_GroupServer_leavePtr
newCallback_GroupServer_leave(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_leave<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_leave.
 */
template<class T, typename CT> Callback_GroupServer_leavePtr
newCallback_GroupServer_leave(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_leave<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::GroupServer::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_sendMessage.
 */
template<class T>
class CallbackNC_GroupServer_sendMessage : public Callback_GroupServer_sendMessage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GroupServer_sendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerPrx proxy = GroupServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_sendMessage(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_sendMessage.
 */
template<class T> Callback_GroupServer_sendMessagePtr
newCallback_GroupServer_sendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_sendMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_sendMessage.
 */
template<class T> Callback_GroupServer_sendMessagePtr
newCallback_GroupServer_sendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_sendMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_sendMessage.
 */
template<class T> Callback_GroupServer_sendMessagePtr
newCallback_GroupServer_sendMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_sendMessage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_sendMessage.
 */
template<class T> Callback_GroupServer_sendMessagePtr
newCallback_GroupServer_sendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServer_sendMessage<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::GroupServer::begin_sendMessage.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServer_sendMessage.
 */
template<class T, typename CT>
class Callback_GroupServer_sendMessage : public Callback_GroupServer_sendMessage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GroupServer_sendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerPrx proxy = GroupServerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_sendMessage(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_sendMessage.
 */
template<class T, typename CT> Callback_GroupServer_sendMessagePtr
newCallback_GroupServer_sendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_sendMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_sendMessage.
 */
template<class T, typename CT> Callback_GroupServer_sendMessagePtr
newCallback_GroupServer_sendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_sendMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_sendMessage.
 */
template<class T, typename CT> Callback_GroupServer_sendMessagePtr
newCallback_GroupServer_sendMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_sendMessage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServer::begin_sendMessage.
 */
template<class T, typename CT> Callback_GroupServer_sendMessagePtr
newCallback_GroupServer_sendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServer_sendMessage<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::GroupServerManager::begin_getGroupsCount.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_getGroupsCount.
 */
template<class T>
class CallbackNC_GroupServerManager_getGroupsCount : public Callback_GroupServerManager_getGroupsCount_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_GroupServerManager_getGroupsCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerManagerPrx proxy = GroupServerManagerPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_getGroupsCount(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_getGroupsCount.
 */
template<class T> Callback_GroupServerManager_getGroupsCountPtr
newCallback_GroupServerManager_getGroupsCount(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_getGroupsCount<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_getGroupsCount.
 */
template<class T> Callback_GroupServerManager_getGroupsCountPtr
newCallback_GroupServerManager_getGroupsCount(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_getGroupsCount<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::GroupServerManager::begin_getGroupsCount.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_getGroupsCount.
 */
template<class T, typename CT>
class Callback_GroupServerManager_getGroupsCount : public Callback_GroupServerManager_getGroupsCount_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_GroupServerManager_getGroupsCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerManagerPrx proxy = GroupServerManagerPrx::uncheckedCast(result->getProxy());
        ::Ice::Int ret;
        try
        {
            ret = proxy->end_getGroupsCount(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_getGroupsCount.
 */
template<class T, typename CT> Callback_GroupServerManager_getGroupsCountPtr
newCallback_GroupServerManager_getGroupsCount(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_getGroupsCount<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_getGroupsCount.
 */
template<class T, typename CT> Callback_GroupServerManager_getGroupsCountPtr
newCallback_GroupServerManager_getGroupsCount(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_getGroupsCount<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::GroupServerManager::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_getName.
 */
template<class T>
class CallbackNC_GroupServerManager_getName : public Callback_GroupServerManager_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_GroupServerManager_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerManagerPrx proxy = GroupServerManagerPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_getName.
 */
template<class T> Callback_GroupServerManager_getNamePtr
newCallback_GroupServerManager_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_getName.
 */
template<class T> Callback_GroupServerManager_getNamePtr
newCallback_GroupServerManager_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::GroupServerManager::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_getName.
 */
template<class T, typename CT>
class Callback_GroupServerManager_getName : public Callback_GroupServerManager_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_GroupServerManager_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerManagerPrx proxy = GroupServerManagerPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_getName.
 */
template<class T, typename CT> Callback_GroupServerManager_getNamePtr
newCallback_GroupServerManager_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_getName.
 */
template<class T, typename CT> Callback_GroupServerManager_getNamePtr
newCallback_GroupServerManager_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::GroupServerManager::begin_listGroups.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_listGroups.
 */
template<class T>
class CallbackNC_GroupServerManager_listGroups : public Callback_GroupServerManager_listGroups_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Groups&);

    CallbackNC_GroupServerManager_listGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerManagerPrx proxy = GroupServerManagerPrx::uncheckedCast(result->getProxy());
        Groups ret;
        try
        {
            ret = proxy->end_listGroups(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_listGroups.
 */
template<class T> Callback_GroupServerManager_listGroupsPtr
newCallback_GroupServerManager_listGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(const Groups&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_listGroups<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_listGroups.
 */
template<class T> Callback_GroupServerManager_listGroupsPtr
newCallback_GroupServerManager_listGroups(T* instance, void (T::*cb)(const Groups&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_listGroups<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::GroupServerManager::begin_listGroups.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_listGroups.
 */
template<class T, typename CT>
class Callback_GroupServerManager_listGroups : public Callback_GroupServerManager_listGroups_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Groups&, const CT&);

    Callback_GroupServerManager_listGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerManagerPrx proxy = GroupServerManagerPrx::uncheckedCast(result->getProxy());
        Groups ret;
        try
        {
            ret = proxy->end_listGroups(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_listGroups.
 */
template<class T, typename CT> Callback_GroupServerManager_listGroupsPtr
newCallback_GroupServerManager_listGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(const Groups&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_listGroups<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_listGroups.
 */
template<class T, typename CT> Callback_GroupServerManager_listGroupsPtr
newCallback_GroupServerManager_listGroups(T* instance, void (T::*cb)(const Groups&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_listGroups<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::GroupServerManager::begin_getGroupServerByName.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_getGroupServerByName.
 */
template<class T>
class CallbackNC_GroupServerManager_getGroupServerByName : public Callback_GroupServerManager_getGroupServerByName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const GroupServerPrx&);

    CallbackNC_GroupServerManager_getGroupServerByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerManagerPrx proxy = GroupServerManagerPrx::uncheckedCast(result->getProxy());
        GroupServerPrx ret;
        try
        {
            ret = proxy->end_getGroupServerByName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_getGroupServerByName.
 */
template<class T> Callback_GroupServerManager_getGroupServerByNamePtr
newCallback_GroupServerManager_getGroupServerByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const GroupServerPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_getGroupServerByName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_getGroupServerByName.
 */
template<class T> Callback_GroupServerManager_getGroupServerByNamePtr
newCallback_GroupServerManager_getGroupServerByName(T* instance, void (T::*cb)(const GroupServerPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_getGroupServerByName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::GroupServerManager::begin_getGroupServerByName.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_getGroupServerByName.
 */
template<class T, typename CT>
class Callback_GroupServerManager_getGroupServerByName : public Callback_GroupServerManager_getGroupServerByName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const GroupServerPrx&, const CT&);

    Callback_GroupServerManager_getGroupServerByName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerManagerPrx proxy = GroupServerManagerPrx::uncheckedCast(result->getProxy());
        GroupServerPrx ret;
        try
        {
            ret = proxy->end_getGroupServerByName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_getGroupServerByName.
 */
template<class T, typename CT> Callback_GroupServerManager_getGroupServerByNamePtr
newCallback_GroupServerManager_getGroupServerByName(const IceUtil::Handle<T>& instance, void (T::*cb)(const GroupServerPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_getGroupServerByName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_getGroupServerByName.
 */
template<class T, typename CT> Callback_GroupServerManager_getGroupServerByNamePtr
newCallback_GroupServerManager_getGroupServerByName(T* instance, void (T::*cb)(const GroupServerPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_getGroupServerByName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::GroupServerManager::begin_createGroup.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_createGroup.
 */
template<class T>
class CallbackNC_GroupServerManager_createGroup : public Callback_GroupServerManager_createGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const GroupServerPrx&);

    CallbackNC_GroupServerManager_createGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerManagerPrx proxy = GroupServerManagerPrx::uncheckedCast(result->getProxy());
        GroupServerPrx ret;
        try
        {
            ret = proxy->end_createGroup(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_createGroup.
 */
template<class T> Callback_GroupServerManager_createGroupPtr
newCallback_GroupServerManager_createGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const GroupServerPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_createGroup<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_createGroup.
 */
template<class T> Callback_GroupServerManager_createGroupPtr
newCallback_GroupServerManager_createGroup(T* instance, void (T::*cb)(const GroupServerPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_createGroup<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::GroupServerManager::begin_createGroup.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_createGroup.
 */
template<class T, typename CT>
class Callback_GroupServerManager_createGroup : public Callback_GroupServerManager_createGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const GroupServerPrx&, const CT&);

    Callback_GroupServerManager_createGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerManagerPrx proxy = GroupServerManagerPrx::uncheckedCast(result->getProxy());
        GroupServerPrx ret;
        try
        {
            ret = proxy->end_createGroup(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_createGroup.
 */
template<class T, typename CT> Callback_GroupServerManager_createGroupPtr
newCallback_GroupServerManager_createGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const GroupServerPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_createGroup<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_createGroup.
 */
template<class T, typename CT> Callback_GroupServerManager_createGroupPtr
newCallback_GroupServerManager_createGroup(T* instance, void (T::*cb)(const GroupServerPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_createGroup<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::GroupServerManager::begin_deleteGroup.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_deleteGroup.
 */
template<class T>
class CallbackNC_GroupServerManager_deleteGroup : public Callback_GroupServerManager_deleteGroup_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GroupServerManager_deleteGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerManagerPrx proxy = GroupServerManagerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_deleteGroup(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_deleteGroup.
 */
template<class T> Callback_GroupServerManager_deleteGroupPtr
newCallback_GroupServerManager_deleteGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_deleteGroup<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_deleteGroup.
 */
template<class T> Callback_GroupServerManager_deleteGroupPtr
newCallback_GroupServerManager_deleteGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_deleteGroup<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_deleteGroup.
 */
template<class T> Callback_GroupServerManager_deleteGroupPtr
newCallback_GroupServerManager_deleteGroup(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_deleteGroup<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_deleteGroup.
 */
template<class T> Callback_GroupServerManager_deleteGroupPtr
newCallback_GroupServerManager_deleteGroup(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GroupServerManager_deleteGroup<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::GroupServerManager::begin_deleteGroup.
 * Create a wrapper instance by calling ::Chat::newCallback_GroupServerManager_deleteGroup.
 */
template<class T, typename CT>
class Callback_GroupServerManager_deleteGroup : public Callback_GroupServerManager_deleteGroup_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GroupServerManager_deleteGroup(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        GroupServerManagerPrx proxy = GroupServerManagerPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_deleteGroup(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_deleteGroup.
 */
template<class T, typename CT> Callback_GroupServerManager_deleteGroupPtr
newCallback_GroupServerManager_deleteGroup(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_deleteGroup<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_deleteGroup.
 */
template<class T, typename CT> Callback_GroupServerManager_deleteGroupPtr
newCallback_GroupServerManager_deleteGroup(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_deleteGroup<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_deleteGroup.
 */
template<class T, typename CT> Callback_GroupServerManager_deleteGroupPtr
newCallback_GroupServerManager_deleteGroup(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_deleteGroup<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::GroupServerManager::begin_deleteGroup.
 */
template<class T, typename CT> Callback_GroupServerManager_deleteGroupPtr
newCallback_GroupServerManager_deleteGroup(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GroupServerManager_deleteGroup<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::User::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_User_getName.
 */
template<class T>
class CallbackNC_User_getName : public Callback_User_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_User_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UserPrx proxy = UserPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_getName.
 */
template<class T> Callback_User_getNamePtr
newCallback_User_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_getName.
 */
template<class T> Callback_User_getNamePtr
newCallback_User_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getName<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::User::begin_getName.
 * Create a wrapper instance by calling ::Chat::newCallback_User_getName.
 */
template<class T, typename CT>
class Callback_User_getName : public Callback_User_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_User_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        UserPrx proxy = UserPrx::uncheckedCast(result->getProxy());
        ::std::string ret;
        try
        {
            ret = proxy->end_getName(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_getName.
 */
template<class T, typename CT> Callback_User_getNamePtr
newCallback_User_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_getName.
 */
template<class T, typename CT> Callback_User_getNamePtr
newCallback_User_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getName<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::User::begin_receiveText.
 * Create a wrapper instance by calling ::Chat::newCallback_User_receiveText.
 */
template<class T>
class CallbackNC_User_receiveText : public Callback_User_receiveText_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_receiveText(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receiveText.
 */
template<class T> Callback_User_receiveTextPtr
newCallback_User_receiveText(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_receiveText<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receiveText.
 */
template<class T> Callback_User_receiveTextPtr
newCallback_User_receiveText(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_receiveText<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receiveText.
 */
template<class T> Callback_User_receiveTextPtr
newCallback_User_receiveText(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_receiveText<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receiveText.
 */
template<class T> Callback_User_receiveTextPtr
newCallback_User_receiveText(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_receiveText<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::User::begin_receiveText.
 * Create a wrapper instance by calling ::Chat::newCallback_User_receiveText.
 */
template<class T, typename CT>
class Callback_User_receiveText : public Callback_User_receiveText_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_receiveText(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receiveText.
 */
template<class T, typename CT> Callback_User_receiveTextPtr
newCallback_User_receiveText(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_receiveText<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receiveText.
 */
template<class T, typename CT> Callback_User_receiveTextPtr
newCallback_User_receiveText(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_receiveText<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receiveText.
 */
template<class T, typename CT> Callback_User_receiveTextPtr
newCallback_User_receiveText(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_receiveText<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receiveText.
 */
template<class T, typename CT> Callback_User_receiveTextPtr
newCallback_User_receiveText(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_receiveText<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::Chat::User::begin_receivePrivateText.
 * Create a wrapper instance by calling ::Chat::newCallback_User_receivePrivateText.
 */
template<class T>
class CallbackNC_User_receivePrivateText : public Callback_User_receivePrivateText_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_receivePrivateText(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receivePrivateText.
 */
template<class T> Callback_User_receivePrivateTextPtr
newCallback_User_receivePrivateText(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_receivePrivateText<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receivePrivateText.
 */
template<class T> Callback_User_receivePrivateTextPtr
newCallback_User_receivePrivateText(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_receivePrivateText<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receivePrivateText.
 */
template<class T> Callback_User_receivePrivateTextPtr
newCallback_User_receivePrivateText(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_receivePrivateText<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receivePrivateText.
 */
template<class T> Callback_User_receivePrivateTextPtr
newCallback_User_receivePrivateText(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_receivePrivateText<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::Chat::User::begin_receivePrivateText.
 * Create a wrapper instance by calling ::Chat::newCallback_User_receivePrivateText.
 */
template<class T, typename CT>
class Callback_User_receivePrivateText : public Callback_User_receivePrivateText_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_receivePrivateText(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receivePrivateText.
 */
template<class T, typename CT> Callback_User_receivePrivateTextPtr
newCallback_User_receivePrivateText(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_receivePrivateText<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receivePrivateText.
 */
template<class T, typename CT> Callback_User_receivePrivateTextPtr
newCallback_User_receivePrivateText(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_receivePrivateText<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receivePrivateText.
 */
template<class T, typename CT> Callback_User_receivePrivateTextPtr
newCallback_User_receivePrivateText(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_receivePrivateText<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::Chat::User::begin_receivePrivateText.
 */
template<class T, typename CT> Callback_User_receivePrivateTextPtr
newCallback_User_receivePrivateText(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_receivePrivateText<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif

//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.2
//
// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <Chat.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::NameDoesNotExist> iceC_Chat_NameDoesNotExist_init("::Chat::NameDoesNotExist");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::NameAlreadyExists> iceC_Chat_NameAlreadyExists_init("::Chat::NameAlreadyExists");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::ServerAlreadyRegistered> iceC_Chat_ServerAlreadyRegistered_init("::Chat::ServerAlreadyRegistered");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::ServerDoesNotExist> iceC_Chat_ServerDoesNotExist_init("::Chat::ServerDoesNotExist");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::UserAlreadyRegistered> iceC_Chat_UserAlreadyRegistered_init("::Chat::UserAlreadyRegistered");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::UserDoesNotExist> iceC_Chat_UserDoesNotExist_init("::Chat::UserDoesNotExist");

const ::IceInternal::DefaultUserExceptionFactoryInit<::Chat::NoPermission> iceC_Chat_NoPermission_init("::Chat::NoPermission");

const ::std::string iceC_Chat_CoreServer_ids[2] =
{
    "::Chat::CoreServer",
    "::Ice::Object"
};
const ::std::string iceC_Chat_CoreServer_ops[] =
{
    "createGroup",
    "deleteGroup",
    "getGroupServerByName",
    "getUserByName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "listGroups",
    "logIn",
    "logOut",
    "registerServer",
    "unregisterServer"
};
const ::std::string iceC_Chat_CoreServer_getUserByName_name = "getUserByName";
const ::std::string iceC_Chat_CoreServer_listGroups_name = "listGroups";
const ::std::string iceC_Chat_CoreServer_getGroupServerByName_name = "getGroupServerByName";
const ::std::string iceC_Chat_CoreServer_logIn_name = "logIn";
const ::std::string iceC_Chat_CoreServer_logOut_name = "logOut";
const ::std::string iceC_Chat_CoreServer_createGroup_name = "createGroup";
const ::std::string iceC_Chat_CoreServer_deleteGroup_name = "deleteGroup";
const ::std::string iceC_Chat_CoreServer_registerServer_name = "registerServer";
const ::std::string iceC_Chat_CoreServer_unregisterServer_name = "unregisterServer";

const ::std::string iceC_Chat_GroupServer_ids[2] =
{
    "::Chat::GroupServer",
    "::Ice::Object"
};
const ::std::string iceC_Chat_GroupServer_ops[] =
{
    "getAdminName",
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "join",
    "leave",
    "listUsers",
    "sendMessage"
};
const ::std::string iceC_Chat_GroupServer_getName_name = "getName";
const ::std::string iceC_Chat_GroupServer_getAdminName_name = "getAdminName";
const ::std::string iceC_Chat_GroupServer_listUsers_name = "listUsers";
const ::std::string iceC_Chat_GroupServer_join_name = "join";
const ::std::string iceC_Chat_GroupServer_leave_name = "leave";
const ::std::string iceC_Chat_GroupServer_sendMessage_name = "sendMessage";

const ::std::string iceC_Chat_GroupServerManager_ids[2] =
{
    "::Chat::GroupServerManager",
    "::Ice::Object"
};
const ::std::string iceC_Chat_GroupServerManager_ops[] =
{
    "createGroup",
    "deleteGroup",
    "getGroupServerByName",
    "getGroupsCount",
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "listGroups"
};
const ::std::string iceC_Chat_GroupServerManager_getGroupsCount_name = "getGroupsCount";
const ::std::string iceC_Chat_GroupServerManager_getName_name = "getName";
const ::std::string iceC_Chat_GroupServerManager_listGroups_name = "listGroups";
const ::std::string iceC_Chat_GroupServerManager_getGroupServerByName_name = "getGroupServerByName";
const ::std::string iceC_Chat_GroupServerManager_createGroup_name = "createGroup";
const ::std::string iceC_Chat_GroupServerManager_deleteGroup_name = "deleteGroup";

const ::std::string iceC_Chat_User_ids[2] =
{
    "::Chat::User",
    "::Ice::Object"
};
const ::std::string iceC_Chat_User_ops[] =
{
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "receivePrivateText",
    "receiveText"
};
const ::std::string iceC_Chat_User_getName_name = "getName";
const ::std::string iceC_Chat_User_receiveText_name = "receiveText";
const ::std::string iceC_Chat_User_receivePrivateText_name = "receivePrivateText";

}

Chat::NameDoesNotExist::~NameDoesNotExist()
{
}

const ::std::string&
Chat::NameDoesNotExist::ice_staticId()
{
    static const ::std::string typeId = "::Chat::NameDoesNotExist";
    return typeId;
}

Chat::NameAlreadyExists::~NameAlreadyExists()
{
}

const ::std::string&
Chat::NameAlreadyExists::ice_staticId()
{
    static const ::std::string typeId = "::Chat::NameAlreadyExists";
    return typeId;
}

Chat::ServerAlreadyRegistered::~ServerAlreadyRegistered()
{
}

const ::std::string&
Chat::ServerAlreadyRegistered::ice_staticId()
{
    static const ::std::string typeId = "::Chat::ServerAlreadyRegistered";
    return typeId;
}

Chat::ServerDoesNotExist::~ServerDoesNotExist()
{
}

const ::std::string&
Chat::ServerDoesNotExist::ice_staticId()
{
    static const ::std::string typeId = "::Chat::ServerDoesNotExist";
    return typeId;
}

Chat::UserAlreadyRegistered::~UserAlreadyRegistered()
{
}

const ::std::string&
Chat::UserAlreadyRegistered::ice_staticId()
{
    static const ::std::string typeId = "::Chat::UserAlreadyRegistered";
    return typeId;
}

Chat::UserDoesNotExist::~UserDoesNotExist()
{
}

const ::std::string&
Chat::UserDoesNotExist::ice_staticId()
{
    static const ::std::string typeId = "::Chat::UserDoesNotExist";
    return typeId;
}

Chat::NoPermission::~NoPermission()
{
}

const ::std::string&
Chat::NoPermission::ice_staticId()
{
    static const ::std::string typeId = "::Chat::NoPermission";
    return typeId;
}

bool
Chat::CoreServer::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_CoreServer_ids, iceC_Chat_CoreServer_ids + 2, s);
}

::std::vector<::std::string>
Chat::CoreServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_CoreServer_ids[0], &iceC_Chat_CoreServer_ids[2]);
}

::std::string
Chat::CoreServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::CoreServer::ice_staticId()
{
    static const ::std::string typeId = "::Chat::CoreServer";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_getUserByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<UserPrx> ret = this->getUserByName(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_listGroups(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    Groups ret = this->listGroups(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_getGroupServerByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<GroupServerPrx> ret = this->getGroupServerByName(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_logIn(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_user;
    istr->readAll(iceP_user);
    inS.endReadParams();
    this->logIn(::std::move(iceP_user), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_logOut(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_user;
    istr->readAll(iceP_user);
    inS.endReadParams();
    this->logOut(::std::move(iceP_user), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_createGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    ::std::shared_ptr<UserPrx> iceP_requester;
    istr->readAll(iceP_name, iceP_requester);
    inS.endReadParams();
    this->createGroup(::std::move(iceP_name), ::std::move(iceP_requester), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_deleteGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    ::std::shared_ptr<UserPrx> iceP_requester;
    istr->readAll(iceP_name, iceP_requester);
    inS.endReadParams();
    this->deleteGroup(::std::move(iceP_name), ::std::move(iceP_requester), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_registerServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<GroupServerManagerPrx> iceP_serverManager;
    istr->readAll(iceP_serverManager);
    inS.endReadParams();
    this->registerServer(::std::move(iceP_serverManager), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_unregisterServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<GroupServerManagerPrx> iceP_serverManager;
    istr->readAll(iceP_serverManager);
    inS.endReadParams();
    this->unregisterServer(::std::move(iceP_serverManager), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_CoreServer_ops, iceC_Chat_CoreServer_ops + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_CoreServer_ops)
    {
        case 0:
        {
            return _iceD_createGroup(in, current);
        }
        case 1:
        {
            return _iceD_deleteGroup(in, current);
        }
        case 2:
        {
            return _iceD_getGroupServerByName(in, current);
        }
        case 3:
        {
            return _iceD_getUserByName(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_listGroups(in, current);
        }
        case 9:
        {
            return _iceD_logIn(in, current);
        }
        case 10:
        {
            return _iceD_logOut(in, current);
        }
        case 11:
        {
            return _iceD_registerServer(in, current);
        }
        case 12:
        {
            return _iceD_unregisterServer(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Chat::GroupServer::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_GroupServer_ids, iceC_Chat_GroupServer_ids + 2, s);
}

::std::vector<::std::string>
Chat::GroupServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_GroupServer_ids[0], &iceC_Chat_GroupServer_ids[2]);
}

::std::string
Chat::GroupServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::GroupServer::ice_staticId()
{
    static const ::std::string typeId = "::Chat::GroupServer";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::GroupServer::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServer::_iceD_getAdminName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getAdminName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServer::_iceD_listUsers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    Users ret = this->listUsers(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServer::_iceD_join(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_user;
    istr->readAll(iceP_user);
    inS.endReadParams();
    this->join(::std::move(iceP_user), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServer::_iceD_leave(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_user;
    istr->readAll(iceP_user);
    inS.endReadParams();
    this->leave(::std::move(iceP_user), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServer::_iceD_sendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_message;
    ::std::shared_ptr<UserPrx> iceP_sender;
    istr->readAll(iceP_message, iceP_sender);
    inS.endReadParams();
    this->sendMessage(::std::move(iceP_message), ::std::move(iceP_sender), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_GroupServer_ops, iceC_Chat_GroupServer_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_GroupServer_ops)
    {
        case 0:
        {
            return _iceD_getAdminName(in, current);
        }
        case 1:
        {
            return _iceD_getName(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_join(in, current);
        }
        case 7:
        {
            return _iceD_leave(in, current);
        }
        case 8:
        {
            return _iceD_listUsers(in, current);
        }
        case 9:
        {
            return _iceD_sendMessage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Chat::GroupServerManager::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_GroupServerManager_ids, iceC_Chat_GroupServerManager_ids + 2, s);
}

::std::vector<::std::string>
Chat::GroupServerManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_GroupServerManager_ids[0], &iceC_Chat_GroupServerManager_ids[2]);
}

::std::string
Chat::GroupServerManager::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::GroupServerManager::ice_staticId()
{
    static const ::std::string typeId = "::Chat::GroupServerManager";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceD_getGroupsCount(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->getGroupsCount(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceD_listGroups(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    Groups ret = this->listGroups(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceD_getGroupServerByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->readAll(iceP_name);
    inS.endReadParams();
    ::std::shared_ptr<GroupServerPrx> ret = this->getGroupServerByName(::std::move(iceP_name), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceD_createGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    ::std::shared_ptr<UserPrx> iceP_requester;
    istr->readAll(iceP_name, iceP_requester);
    inS.endReadParams();
    ::std::shared_ptr<GroupServerPrx> ret = this->createGroup(::std::move(iceP_name), ::std::move(iceP_requester), current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceD_deleteGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_name;
    ::std::shared_ptr<UserPrx> iceP_requester;
    istr->readAll(iceP_name, iceP_requester);
    inS.endReadParams();
    this->deleteGroup(::std::move(iceP_name), ::std::move(iceP_requester), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_GroupServerManager_ops, iceC_Chat_GroupServerManager_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_GroupServerManager_ops)
    {
        case 0:
        {
            return _iceD_createGroup(in, current);
        }
        case 1:
        {
            return _iceD_deleteGroup(in, current);
        }
        case 2:
        {
            return _iceD_getGroupServerByName(in, current);
        }
        case 3:
        {
            return _iceD_getGroupsCount(in, current);
        }
        case 4:
        {
            return _iceD_getName(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        case 9:
        {
            return _iceD_listGroups(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
Chat::User::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_User_ids, iceC_Chat_User_ids + 2, s);
}

::std::vector<::std::string>
Chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_Chat_User_ids[0], &iceC_Chat_User_ids[2]);
}

::std::string
Chat::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::User::ice_staticId()
{
    static const ::std::string typeId = "::Chat::User";
    return typeId;
}

/// \cond INTERNAL
bool
Chat::User::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_receiveText(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_msg;
    ::std::shared_ptr<UserPrx> iceP_sender;
    ::std::string iceP_groupName;
    istr->readAll(iceP_msg, iceP_sender, iceP_groupName);
    inS.endReadParams();
    this->receiveText(::std::move(iceP_msg), ::std::move(iceP_sender), ::std::move(iceP_groupName), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_receivePrivateText(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_msg;
    ::std::shared_ptr<UserPrx> iceP_sender;
    istr->readAll(iceP_msg, iceP_sender);
    inS.endReadParams();
    this->receivePrivateText(::std::move(iceP_msg), ::std::move(iceP_sender), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_User_ops, iceC_Chat_User_ops + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_User_ops)
    {
        case 0:
        {
            return _iceD_getName(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_receivePrivateText(in, current);
        }
        case 6:
        {
            return _iceD_receiveText(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
Chat::CoreServerPrx::_iceI_getUserByName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<UserPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_getUserByName_name);
    outAsync->invoke(iceC_Chat_CoreServer_getUserByName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::CoreServerPrx::_iceI_listGroups(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Groups>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_listGroups_name);
    outAsync->invoke(iceC_Chat_CoreServer_listGroups_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::CoreServerPrx::_iceI_getGroupServerByName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<GroupServerPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_getGroupServerByName_name);
    outAsync->invoke(iceC_Chat_CoreServer_getGroupServerByName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const NameDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::CoreServerPrx::_iceI_logIn(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_user, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_logIn_name);
    outAsync->invoke(iceC_Chat_CoreServer_logIn_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserAlreadyRegistered&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::CoreServerPrx::_iceI_logOut(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_user, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_logOut_name);
    outAsync->invoke(iceC_Chat_CoreServer_logOut_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::CoreServerPrx::_iceI_createGroup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const ::std::shared_ptr<UserPrx>& iceP_requester, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_createGroup_name);
    outAsync->invoke(iceC_Chat_CoreServer_createGroup_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name, iceP_requester);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const NameAlreadyExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::CoreServerPrx::_iceI_deleteGroup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const ::std::shared_ptr<UserPrx>& iceP_requester, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_deleteGroup_name);
    outAsync->invoke(iceC_Chat_CoreServer_deleteGroup_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name, iceP_requester);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const NameDoesNotExist&)
            {
                throw;
            }
            catch(const NoPermission&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::CoreServerPrx::_iceI_registerServer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<GroupServerManagerPrx>& iceP_serverManager, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_registerServer_name);
    outAsync->invoke(iceC_Chat_CoreServer_registerServer_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_serverManager);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ServerAlreadyRegistered&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::CoreServerPrx::_iceI_unregisterServer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<GroupServerManagerPrx>& iceP_serverManager, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_unregisterServer_name);
    outAsync->invoke(iceC_Chat_CoreServer_unregisterServer_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_serverManager);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ServerDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::CoreServerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<CoreServerPrx>();
}
/// \endcond

const ::std::string&
Chat::CoreServerPrx::ice_staticId()
{
    return CoreServer::ice_staticId();
}

/// \cond INTERNAL
void
Chat::GroupServerPrx::_iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_getName_name);
    outAsync->invoke(iceC_Chat_GroupServer_getName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::GroupServerPrx::_iceI_getAdminName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_getAdminName_name);
    outAsync->invoke(iceC_Chat_GroupServer_getAdminName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::GroupServerPrx::_iceI_listUsers(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Users>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_listUsers_name);
    outAsync->invoke(iceC_Chat_GroupServer_listUsers_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::GroupServerPrx::_iceI_join(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_user, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_join_name);
    outAsync->invoke(iceC_Chat_GroupServer_join_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserAlreadyRegistered&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::GroupServerPrx::_iceI_leave(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_user, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_leave_name);
    outAsync->invoke(iceC_Chat_GroupServer_leave_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::GroupServerPrx::_iceI_sendMessage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_message, const ::std::shared_ptr<UserPrx>& iceP_sender, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_sendMessage_name);
    outAsync->invoke(iceC_Chat_GroupServer_sendMessage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_message, iceP_sender);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const UserDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::GroupServerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<GroupServerPrx>();
}
/// \endcond

const ::std::string&
Chat::GroupServerPrx::ice_staticId()
{
    return GroupServer::ice_staticId();
}

/// \cond INTERNAL
void
Chat::GroupServerManagerPrx::_iceI_getGroupsCount(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_getGroupsCount_name);
    outAsync->invoke(iceC_Chat_GroupServerManager_getGroupsCount_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::GroupServerManagerPrx::_iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_getName_name);
    outAsync->invoke(iceC_Chat_GroupServerManager_getName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::GroupServerManagerPrx::_iceI_listGroups(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<Groups>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_listGroups_name);
    outAsync->invoke(iceC_Chat_GroupServerManager_listGroups_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::GroupServerManagerPrx::_iceI_getGroupServerByName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<GroupServerPrx>>>& outAsync, const ::std::string& iceP_name, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_getGroupServerByName_name);
    outAsync->invoke(iceC_Chat_GroupServerManager_getGroupServerByName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const NameDoesNotExist&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::GroupServerManagerPrx::_iceI_createGroup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<GroupServerPrx>>>& outAsync, const ::std::string& iceP_name, const ::std::shared_ptr<UserPrx>& iceP_requester, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_createGroup_name);
    outAsync->invoke(iceC_Chat_GroupServerManager_createGroup_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name, iceP_requester);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const NameAlreadyExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
Chat::GroupServerManagerPrx::_iceI_deleteGroup(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_name, const ::std::shared_ptr<UserPrx>& iceP_requester, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_deleteGroup_name);
    outAsync->invoke(iceC_Chat_GroupServerManager_deleteGroup_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_name, iceP_requester);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const NameDoesNotExist&)
            {
                throw;
            }
            catch(const NoPermission&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::GroupServerManagerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<GroupServerManagerPrx>();
}
/// \endcond

const ::std::string&
Chat::GroupServerManagerPrx::ice_staticId()
{
    return GroupServerManager::ice_staticId();
}

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_Chat_User_getName_name);
    outAsync->invoke(iceC_Chat_User_getName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_receiveText(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_msg, const ::std::shared_ptr<UserPrx>& iceP_sender, const ::std::string& iceP_groupName, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_User_receiveText_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_msg, iceP_sender, iceP_groupName);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
Chat::UserPrx::_iceI_receivePrivateText(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_msg, const ::std::shared_ptr<UserPrx>& iceP_sender, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_Chat_User_receivePrivateText_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_msg, iceP_sender);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
Chat::UserPrx::_newInstance() const
{
    return ::IceInternal::createProxy<UserPrx>();
}
/// \endcond

const ::std::string&
Chat::UserPrx::ice_staticId()
{
    return User::ice_staticId();
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_Chat_CoreServer_getUserByName_name = "getUserByName";

const ::std::string iceC_Chat_CoreServer_listGroups_name = "listGroups";

const ::std::string iceC_Chat_CoreServer_getGroupServerByName_name = "getGroupServerByName";

const ::std::string iceC_Chat_CoreServer_logIn_name = "logIn";

const ::std::string iceC_Chat_CoreServer_logOut_name = "logOut";

const ::std::string iceC_Chat_CoreServer_createGroup_name = "createGroup";

const ::std::string iceC_Chat_CoreServer_deleteGroup_name = "deleteGroup";

const ::std::string iceC_Chat_CoreServer_registerServer_name = "registerServer";

const ::std::string iceC_Chat_CoreServer_unregisterServer_name = "unregisterServer";

const ::std::string iceC_Chat_GroupServer_getName_name = "getName";

const ::std::string iceC_Chat_GroupServer_getAdminName_name = "getAdminName";

const ::std::string iceC_Chat_GroupServer_listUsers_name = "listUsers";

const ::std::string iceC_Chat_GroupServer_join_name = "join";

const ::std::string iceC_Chat_GroupServer_leave_name = "leave";

const ::std::string iceC_Chat_GroupServer_sendMessage_name = "sendMessage";

const ::std::string iceC_Chat_GroupServerManager_getGroupsCount_name = "getGroupsCount";

const ::std::string iceC_Chat_GroupServerManager_getName_name = "getName";

const ::std::string iceC_Chat_GroupServerManager_listGroups_name = "listGroups";

const ::std::string iceC_Chat_GroupServerManager_getGroupServerByName_name = "getGroupServerByName";

const ::std::string iceC_Chat_GroupServerManager_createGroup_name = "createGroup";

const ::std::string iceC_Chat_GroupServerManager_deleteGroup_name = "deleteGroup";

const ::std::string iceC_Chat_User_getName_name = "getName";

const ::std::string iceC_Chat_User_receiveText_name = "receiveText";

const ::std::string iceC_Chat_User_receivePrivateText_name = "receivePrivateText";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NameDoesNotExist> iceC_Chat_NameDoesNotExist_init("::Chat::NameDoesNotExist");

}

Chat::NameDoesNotExist::~NameDoesNotExist() throw()
{
}

::std::string
Chat::NameDoesNotExist::ice_id() const
{
    return "::Chat::NameDoesNotExist";
}

Chat::NameDoesNotExist*
Chat::NameDoesNotExist::ice_clone() const
{
    return new NameDoesNotExist(*this);
}

void
Chat::NameDoesNotExist::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::NameDoesNotExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::NameDoesNotExist", -1, true);
    ::Ice::StreamWriter< NameDoesNotExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::NameDoesNotExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< NameDoesNotExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NameAlreadyExists> iceC_Chat_NameAlreadyExists_init("::Chat::NameAlreadyExists");

}

Chat::NameAlreadyExists::~NameAlreadyExists() throw()
{
}

::std::string
Chat::NameAlreadyExists::ice_id() const
{
    return "::Chat::NameAlreadyExists";
}

Chat::NameAlreadyExists*
Chat::NameAlreadyExists::ice_clone() const
{
    return new NameAlreadyExists(*this);
}

void
Chat::NameAlreadyExists::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::NameAlreadyExists::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::NameAlreadyExists", -1, true);
    ::Ice::StreamWriter< NameAlreadyExists, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::NameAlreadyExists::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< NameAlreadyExists, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::ServerAlreadyRegistered> iceC_Chat_ServerAlreadyRegistered_init("::Chat::ServerAlreadyRegistered");

}

Chat::ServerAlreadyRegistered::~ServerAlreadyRegistered() throw()
{
}

::std::string
Chat::ServerAlreadyRegistered::ice_id() const
{
    return "::Chat::ServerAlreadyRegistered";
}

Chat::ServerAlreadyRegistered*
Chat::ServerAlreadyRegistered::ice_clone() const
{
    return new ServerAlreadyRegistered(*this);
}

void
Chat::ServerAlreadyRegistered::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::ServerAlreadyRegistered::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::ServerAlreadyRegistered", -1, true);
    ::Ice::StreamWriter< ServerAlreadyRegistered, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::ServerAlreadyRegistered::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ServerAlreadyRegistered, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::ServerDoesNotExist> iceC_Chat_ServerDoesNotExist_init("::Chat::ServerDoesNotExist");

}

Chat::ServerDoesNotExist::~ServerDoesNotExist() throw()
{
}

::std::string
Chat::ServerDoesNotExist::ice_id() const
{
    return "::Chat::ServerDoesNotExist";
}

Chat::ServerDoesNotExist*
Chat::ServerDoesNotExist::ice_clone() const
{
    return new ServerDoesNotExist(*this);
}

void
Chat::ServerDoesNotExist::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::ServerDoesNotExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::ServerDoesNotExist", -1, true);
    ::Ice::StreamWriter< ServerDoesNotExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::ServerDoesNotExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< ServerDoesNotExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::UserAlreadyRegistered> iceC_Chat_UserAlreadyRegistered_init("::Chat::UserAlreadyRegistered");

}

Chat::UserAlreadyRegistered::~UserAlreadyRegistered() throw()
{
}

::std::string
Chat::UserAlreadyRegistered::ice_id() const
{
    return "::Chat::UserAlreadyRegistered";
}

Chat::UserAlreadyRegistered*
Chat::UserAlreadyRegistered::ice_clone() const
{
    return new UserAlreadyRegistered(*this);
}

void
Chat::UserAlreadyRegistered::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::UserAlreadyRegistered::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::UserAlreadyRegistered", -1, true);
    ::Ice::StreamWriter< UserAlreadyRegistered, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::UserAlreadyRegistered::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UserAlreadyRegistered, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::UserDoesNotExist> iceC_Chat_UserDoesNotExist_init("::Chat::UserDoesNotExist");

}

Chat::UserDoesNotExist::~UserDoesNotExist() throw()
{
}

::std::string
Chat::UserDoesNotExist::ice_id() const
{
    return "::Chat::UserDoesNotExist";
}

Chat::UserDoesNotExist*
Chat::UserDoesNotExist::ice_clone() const
{
    return new UserDoesNotExist(*this);
}

void
Chat::UserDoesNotExist::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::UserDoesNotExist::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::UserDoesNotExist", -1, true);
    ::Ice::StreamWriter< UserDoesNotExist, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::UserDoesNotExist::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< UserDoesNotExist, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NoPermission> iceC_Chat_NoPermission_init("::Chat::NoPermission");

}

Chat::NoPermission::~NoPermission() throw()
{
}

::std::string
Chat::NoPermission::ice_id() const
{
    return "::Chat::NoPermission";
}

Chat::NoPermission*
Chat::NoPermission::ice_clone() const
{
    return new NoPermission(*this);
}

void
Chat::NoPermission::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
Chat::NoPermission::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::Chat::NoPermission", -1, true);
    ::Ice::StreamWriter< NoPermission, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::NoPermission::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< NoPermission, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(CoreServer* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< CoreServer>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new CoreServer;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::CoreServer::_iceI_begin_getUserByName(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_getUserByName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_CoreServer_getUserByName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_CoreServer_getUserByName_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_CoreServer_getUserByName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::UserPrx
IceProxy::Chat::CoreServer::end_getUserByName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_CoreServer_getUserByName_name);
    ::Chat::UserPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::CoreServer::_iceI_begin_listGroups(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_listGroups_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_CoreServer_listGroups_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_CoreServer_listGroups_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_CoreServer_listGroups_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::Groups
IceProxy::Chat::CoreServer::end_listGroups(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_CoreServer_listGroups_name);
    ::Chat::Groups ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::CoreServer::_iceI_begin_getGroupServerByName(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_getGroupServerByName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_CoreServer_getGroupServerByName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_CoreServer_getGroupServerByName_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_CoreServer_getGroupServerByName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::GroupServerPrx
IceProxy::Chat::CoreServer::end_getGroupServerByName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_CoreServer_getGroupServerByName_name);
    ::Chat::GroupServerPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NameDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::CoreServer::_iceI_begin_logIn(const ::Chat::UserPrx& iceP_user, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_logIn_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_CoreServer_logIn_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_CoreServer_logIn_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        result->endWriteParams();
        result->invoke(iceC_Chat_CoreServer_logIn_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::CoreServer::end_logIn(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_CoreServer_logIn_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserAlreadyRegistered&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::CoreServer::_iceI_begin_logOut(const ::Chat::UserPrx& iceP_user, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_logOut_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_CoreServer_logOut_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_CoreServer_logOut_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        result->endWriteParams();
        result->invoke(iceC_Chat_CoreServer_logOut_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::CoreServer::end_logOut(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_CoreServer_logOut_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::CoreServer::_iceI_begin_createGroup(const ::std::string& iceP_name, const ::Chat::UserPrx& iceP_requester, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_createGroup_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_CoreServer_createGroup_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_CoreServer_createGroup_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        ostr->write(iceP_requester);
        result->endWriteParams();
        result->invoke(iceC_Chat_CoreServer_createGroup_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::CoreServer::end_createGroup(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_CoreServer_createGroup_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NameAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::CoreServer::_iceI_begin_deleteGroup(const ::std::string& iceP_name, const ::Chat::UserPrx& iceP_requester, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_deleteGroup_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_CoreServer_deleteGroup_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_CoreServer_deleteGroup_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        ostr->write(iceP_requester);
        result->endWriteParams();
        result->invoke(iceC_Chat_CoreServer_deleteGroup_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::CoreServer::end_deleteGroup(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_CoreServer_deleteGroup_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NameDoesNotExist&)
        {
            throw;
        }
        catch(const ::Chat::NoPermission&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::CoreServer::_iceI_begin_registerServer(const ::Chat::GroupServerManagerPrx& iceP_serverManager, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_registerServer_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_CoreServer_registerServer_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_CoreServer_registerServer_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_serverManager);
        result->endWriteParams();
        result->invoke(iceC_Chat_CoreServer_registerServer_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::CoreServer::end_registerServer(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_CoreServer_registerServer_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::ServerAlreadyRegistered&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::CoreServer::_iceI_begin_unregisterServer(const ::Chat::GroupServerManagerPrx& iceP_serverManager, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_CoreServer_unregisterServer_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_CoreServer_unregisterServer_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_CoreServer_unregisterServer_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_serverManager);
        result->endWriteParams();
        result->invoke(iceC_Chat_CoreServer_unregisterServer_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::CoreServer::end_unregisterServer(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_CoreServer_unregisterServer_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::ServerDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::CoreServer::_newInstance() const
{
    return new CoreServer;
}
/// \endcond

const ::std::string&
IceProxy::Chat::CoreServer::ice_staticId()
{
    return ::Chat::CoreServer::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(GroupServer* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< GroupServer>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new GroupServer;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::_iceI_begin_getName(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_getName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServer_getName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServer_getName_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_GroupServer_getName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::GroupServer::end_getName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServer_getName_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::_iceI_begin_getAdminName(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_getAdminName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServer_getAdminName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServer_getAdminName_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_GroupServer_getAdminName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::GroupServer::end_getAdminName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServer_getAdminName_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::_iceI_begin_listUsers(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_listUsers_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServer_listUsers_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServer_listUsers_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_GroupServer_listUsers_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::Users
IceProxy::Chat::GroupServer::end_listUsers(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServer_listUsers_name);
    ::Chat::Users ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::_iceI_begin_join(const ::Chat::UserPrx& iceP_user, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_join_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServer_join_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServer_join_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        result->endWriteParams();
        result->invoke(iceC_Chat_GroupServer_join_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::GroupServer::end_join(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServer_join_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserAlreadyRegistered&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::_iceI_begin_leave(const ::Chat::UserPrx& iceP_user, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_leave_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServer_leave_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServer_leave_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        result->endWriteParams();
        result->invoke(iceC_Chat_GroupServer_leave_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::GroupServer::end_leave(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServer_leave_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServer::_iceI_begin_sendMessage(const ::std::string& iceP_message, const ::Chat::UserPrx& iceP_sender, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServer_sendMessage_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServer_sendMessage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServer_sendMessage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_message);
        ostr->write(iceP_sender);
        result->endWriteParams();
        result->invoke(iceC_Chat_GroupServer_sendMessage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::GroupServer::end_sendMessage(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServer_sendMessage_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::UserDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::GroupServer::_newInstance() const
{
    return new GroupServer;
}
/// \endcond

const ::std::string&
IceProxy::Chat::GroupServer::ice_staticId()
{
    return ::Chat::GroupServer::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(GroupServerManager* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< GroupServerManager>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new GroupServerManager;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::_iceI_begin_getGroupsCount(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_getGroupsCount_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServerManager_getGroupsCount_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServerManager_getGroupsCount_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_GroupServerManager_getGroupsCount_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::Chat::GroupServerManager::end_getGroupsCount(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServerManager_getGroupsCount_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::_iceI_begin_getName(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_getName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServerManager_getName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServerManager_getName_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_GroupServerManager_getName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::GroupServerManager::end_getName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServerManager_getName_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::_iceI_begin_listGroups(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_listGroups_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServerManager_listGroups_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServerManager_listGroups_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_GroupServerManager_listGroups_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::Groups
IceProxy::Chat::GroupServerManager::end_listGroups(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServerManager_listGroups_name);
    ::Chat::Groups ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::_iceI_begin_getGroupServerByName(const ::std::string& iceP_name, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_getGroupServerByName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServerManager_getGroupServerByName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServerManager_getGroupServerByName_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        result->endWriteParams();
        result->invoke(iceC_Chat_GroupServerManager_getGroupServerByName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::GroupServerPrx
IceProxy::Chat::GroupServerManager::end_getGroupServerByName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServerManager_getGroupServerByName_name);
    ::Chat::GroupServerPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NameDoesNotExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::_iceI_begin_createGroup(const ::std::string& iceP_name, const ::Chat::UserPrx& iceP_requester, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_createGroup_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServerManager_createGroup_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServerManager_createGroup_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        ostr->write(iceP_requester);
        result->endWriteParams();
        result->invoke(iceC_Chat_GroupServerManager_createGroup_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Chat::GroupServerPrx
IceProxy::Chat::GroupServerManager::end_createGroup(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServerManager_createGroup_name);
    ::Chat::GroupServerPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NameAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::GroupServerManager::_iceI_begin_deleteGroup(const ::std::string& iceP_name, const ::Chat::UserPrx& iceP_requester, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_GroupServerManager_deleteGroup_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_GroupServerManager_deleteGroup_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_GroupServerManager_deleteGroup_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_name);
        ostr->write(iceP_requester);
        result->endWriteParams();
        result->invoke(iceC_Chat_GroupServerManager_deleteGroup_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::GroupServerManager::end_deleteGroup(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_GroupServerManager_deleteGroup_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Chat::NameDoesNotExist&)
        {
            throw;
        }
        catch(const ::Chat::NoPermission&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::GroupServerManager::_newInstance() const
{
    return new GroupServerManager;
}
/// \endcond

const ::std::string&
IceProxy::Chat::GroupServerManager::ice_staticId()
{
    return ::Chat::GroupServerManager::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(User* p) { return p; }

void
::IceProxy::Chat::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< User>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new User;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_getName(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_Chat_User_getName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_getName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_getName_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_Chat_User_getName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::Chat::User::end_getName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_Chat_User_getName_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_receiveText(const ::std::string& iceP_msg, const ::Chat::UserPrx& iceP_sender, const ::std::string& iceP_groupName, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_receiveText_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_receiveText_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_msg);
        ostr->write(iceP_sender);
        ostr->write(iceP_groupName);
        result->endWriteParams();
        result->invoke(iceC_Chat_User_receiveText_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::User::end_receiveText(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_User_receiveText_name);
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::_iceI_begin_receivePrivateText(const ::std::string& iceP_msg, const ::Chat::UserPrx& iceP_sender, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_Chat_User_receivePrivateText_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_Chat_User_receivePrivateText_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_msg);
        ostr->write(iceP_sender);
        result->endWriteParams();
        result->invoke(iceC_Chat_User_receivePrivateText_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::Chat::User::end_receivePrivateText(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_Chat_User_receivePrivateText_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::Chat::User::_newInstance() const
{
    return new User;
}
/// \endcond

const ::std::string&
IceProxy::Chat::User::ice_staticId()
{
    return ::Chat::User::ice_staticId();
}

Chat::CoreServer::~CoreServer()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(CoreServer* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_CoreServer_ids[2] =
{
    "::Chat::CoreServer",
    "::Ice::Object"
};

}

bool
Chat::CoreServer::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_CoreServer_ids, iceC_Chat_CoreServer_ids + 2, s);
}

::std::vector< ::std::string>
Chat::CoreServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_CoreServer_ids[0], &iceC_Chat_CoreServer_ids[2]);
}

const ::std::string&
Chat::CoreServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::CoreServer::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::CoreServer";
    return typeId;
#else
    return iceC_Chat_CoreServer_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_getUserByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    UserPrx ret = this->getUserByName(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_listGroups(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    Groups ret = this->listGroups(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_getGroupServerByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    GroupServerPrx ret = this->getGroupServerByName(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_logIn(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_user;
    istr->read(iceP_user);
    inS.endReadParams();
    this->logIn(iceP_user, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_logOut(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_user;
    istr->read(iceP_user);
    inS.endReadParams();
    this->logOut(iceP_user, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_createGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    UserPrx iceP_requester;
    istr->read(iceP_name);
    istr->read(iceP_requester);
    inS.endReadParams();
    this->createGroup(iceP_name, iceP_requester, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_deleteGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    UserPrx iceP_requester;
    istr->read(iceP_name);
    istr->read(iceP_requester);
    inS.endReadParams();
    this->deleteGroup(iceP_name, iceP_requester, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_registerServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    GroupServerManagerPrx iceP_serverManager;
    istr->read(iceP_serverManager);
    inS.endReadParams();
    this->registerServer(iceP_serverManager, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::CoreServer::_iceD_unregisterServer(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    GroupServerManagerPrx iceP_serverManager;
    istr->read(iceP_serverManager);
    inS.endReadParams();
    this->unregisterServer(iceP_serverManager, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_CoreServer_all[] =
{
    "createGroup",
    "deleteGroup",
    "getGroupServerByName",
    "getUserByName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "listGroups",
    "logIn",
    "logOut",
    "registerServer",
    "unregisterServer"
};

}

/// \cond INTERNAL
bool
Chat::CoreServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_CoreServer_all, iceC_Chat_CoreServer_all + 13, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_CoreServer_all)
    {
        case 0:
        {
            return _iceD_createGroup(in, current);
        }
        case 1:
        {
            return _iceD_deleteGroup(in, current);
        }
        case 2:
        {
            return _iceD_getGroupServerByName(in, current);
        }
        case 3:
        {
            return _iceD_getUserByName(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_listGroups(in, current);
        }
        case 9:
        {
            return _iceD_logIn(in, current);
        }
        case 10:
        {
            return _iceD_logOut(in, current);
        }
        case 11:
        {
            return _iceD_registerServer(in, current);
        }
        case 12:
        {
            return _iceD_unregisterServer(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::CoreServer::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< CoreServer, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::CoreServer::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< CoreServer, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(CoreServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = CoreServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(CoreServer::ice_staticId(), v);
    }
}
/// \endcond

Chat::GroupServer::~GroupServer()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(GroupServer* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_GroupServer_ids[2] =
{
    "::Chat::GroupServer",
    "::Ice::Object"
};

}

bool
Chat::GroupServer::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_GroupServer_ids, iceC_Chat_GroupServer_ids + 2, s);
}

::std::vector< ::std::string>
Chat::GroupServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_GroupServer_ids[0], &iceC_Chat_GroupServer_ids[2]);
}

const ::std::string&
Chat::GroupServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::GroupServer::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::GroupServer";
    return typeId;
#else
    return iceC_Chat_GroupServer_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::GroupServer::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServer::_iceD_getAdminName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getAdminName(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServer::_iceD_listUsers(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    Users ret = this->listUsers(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServer::_iceD_join(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_user;
    istr->read(iceP_user);
    inS.endReadParams();
    this->join(iceP_user, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServer::_iceD_leave(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_user;
    istr->read(iceP_user);
    inS.endReadParams();
    this->leave(iceP_user, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServer::_iceD_sendMessage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_message;
    UserPrx iceP_sender;
    istr->read(iceP_message);
    istr->read(iceP_sender);
    inS.endReadParams();
    this->sendMessage(iceP_message, iceP_sender, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_GroupServer_all[] =
{
    "getAdminName",
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "join",
    "leave",
    "listUsers",
    "sendMessage"
};

}

/// \cond INTERNAL
bool
Chat::GroupServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_GroupServer_all, iceC_Chat_GroupServer_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_GroupServer_all)
    {
        case 0:
        {
            return _iceD_getAdminName(in, current);
        }
        case 1:
        {
            return _iceD_getName(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_join(in, current);
        }
        case 7:
        {
            return _iceD_leave(in, current);
        }
        case 8:
        {
            return _iceD_listUsers(in, current);
        }
        case 9:
        {
            return _iceD_sendMessage(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::GroupServer::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< GroupServer, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::GroupServer::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< GroupServer, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(GroupServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = GroupServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(GroupServer::ice_staticId(), v);
    }
}
/// \endcond

Chat::GroupServerManager::~GroupServerManager()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(GroupServerManager* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_GroupServerManager_ids[2] =
{
    "::Chat::GroupServerManager",
    "::Ice::Object"
};

}

bool
Chat::GroupServerManager::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_GroupServerManager_ids, iceC_Chat_GroupServerManager_ids + 2, s);
}

::std::vector< ::std::string>
Chat::GroupServerManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_GroupServerManager_ids[0], &iceC_Chat_GroupServerManager_ids[2]);
}

const ::std::string&
Chat::GroupServerManager::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::GroupServerManager::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::GroupServerManager";
    return typeId;
#else
    return iceC_Chat_GroupServerManager_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceD_getGroupsCount(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getGroupsCount(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceD_listGroups(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    Groups ret = this->listGroups(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceD_getGroupServerByName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    istr->read(iceP_name);
    inS.endReadParams();
    GroupServerPrx ret = this->getGroupServerByName(iceP_name, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceD_createGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    UserPrx iceP_requester;
    istr->read(iceP_name);
    istr->read(iceP_requester);
    inS.endReadParams();
    GroupServerPrx ret = this->createGroup(iceP_name, iceP_requester, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceD_deleteGroup(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_name;
    UserPrx iceP_requester;
    istr->read(iceP_name);
    istr->read(iceP_requester);
    inS.endReadParams();
    this->deleteGroup(iceP_name, iceP_requester, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_GroupServerManager_all[] =
{
    "createGroup",
    "deleteGroup",
    "getGroupServerByName",
    "getGroupsCount",
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "listGroups"
};

}

/// \cond INTERNAL
bool
Chat::GroupServerManager::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_GroupServerManager_all, iceC_Chat_GroupServerManager_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_GroupServerManager_all)
    {
        case 0:
        {
            return _iceD_createGroup(in, current);
        }
        case 1:
        {
            return _iceD_deleteGroup(in, current);
        }
        case 2:
        {
            return _iceD_getGroupServerByName(in, current);
        }
        case 3:
        {
            return _iceD_getGroupsCount(in, current);
        }
        case 4:
        {
            return _iceD_getName(in, current);
        }
        case 5:
        {
            return _iceD_ice_id(in, current);
        }
        case 6:
        {
            return _iceD_ice_ids(in, current);
        }
        case 7:
        {
            return _iceD_ice_isA(in, current);
        }
        case 8:
        {
            return _iceD_ice_ping(in, current);
        }
        case 9:
        {
            return _iceD_listGroups(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::GroupServerManager::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< GroupServerManager, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::GroupServerManager::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< GroupServerManager, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(GroupServerManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = GroupServerManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(GroupServerManager::ice_staticId(), v);
    }
}
/// \endcond

Chat::User::~User()
{
}

/// \cond INTERNAL
::Ice::Object* Chat::upCast(User* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_Chat_User_ids[2] =
{
    "::Chat::User",
    "::Ice::Object"
};

}

bool
Chat::User::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_Chat_User_ids, iceC_Chat_User_ids + 2, s);
}

::std::vector< ::std::string>
Chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_Chat_User_ids[0], &iceC_Chat_User_ids[2]);
}

const ::std::string&
Chat::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
Chat::User::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::User";
    return typeId;
#else
    return iceC_Chat_User_ids[0];
#endif
}

/// \cond INTERNAL
bool
Chat::User::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_receiveText(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_msg;
    UserPrx iceP_sender;
    ::std::string iceP_groupName;
    istr->read(iceP_msg);
    istr->read(iceP_sender);
    istr->read(iceP_groupName);
    inS.endReadParams();
    this->receiveText(iceP_msg, iceP_sender, iceP_groupName, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
Chat::User::_iceD_receivePrivateText(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_msg;
    UserPrx iceP_sender;
    istr->read(iceP_msg);
    istr->read(iceP_sender);
    inS.endReadParams();
    this->receivePrivateText(iceP_msg, iceP_sender, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_Chat_User_all[] =
{
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "receivePrivateText",
    "receiveText"
};

}

/// \cond INTERNAL
bool
Chat::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_Chat_User_all, iceC_Chat_User_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_Chat_User_all)
    {
        case 0:
        {
            return _iceD_getName(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_receivePrivateText(in, current);
        }
        case 6:
        {
            return _iceD_receiveText(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
Chat::User::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< User, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
Chat::User::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< User, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
Chat::_icePatchObjectPtr(UserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = UserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(User::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
